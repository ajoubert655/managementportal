{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aljou\\\\Documents\\\\Bitbucket\\\\management-portal\\\\src\\\\components\\\\DataTables\\\\Sessions\\\\SessionTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { useTable, useSortBy, useFilters, usePagination, useRowSelect } from 'react-table';\nimport Table from 'react-bootstrap/Table';\nimport axios from '../../../axios';\nimport { withRouter, useHistory } from 'react-router-dom'; //import {CSVLink} from 'react-csv';\n\nimport { COLUMNS } from './columns';\nimport classes from './SessionTable.module.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\nimport Checkbox from '../../UI/Checkbox/Checkbox';\nimport SmallButton from '../../UI/SmallButton/SmallButton';\nimport Spinner from '../../UI/Spinner/Spinner';\n\nconst SessionTable = () => {\n  _s();\n\n  // declare state variables\n  const [sessions, setSessions] = useState([]);\n  const [loaded, setLoaded] = useState(false); // allow use of history\n\n  const history = useHistory(); // get data from api\n\n  useEffect(() => {\n    axios.get('/sessions').then(res => {\n      //console.log(res.data.result.Items);\n      const pathToData = res.data.result.Items;\n      const loadedData = []; // push data objects into an array\n\n      for (const Item in pathToData) {\n        loadedData.push({\n          itemId: pathToData[Item].itemId,\n          itemType: pathToData[Item].itemType,\n          // time data\n          created: new Date(pathToData[Item].created).toLocaleDateString(),\n          updated: new Date(pathToData[Item].updated).toLocaleDateString(),\n          startTime: new Date(pathToData[Item].startTime),\n          endTime: new Date(pathToData[Item].endTime),\n          // session ids and process state\n          sessionOrgId: pathToData[Item].sessionOrgId,\n          sessionTestId: pathToData[Item].sessionTestId,\n          sessionUserId: pathToData[Item].sessionUserId,\n          processState: pathToData[Item].processState,\n          // examinee data\n          id: pathToData[Item].examinee.id,\n          email: pathToData[Item].examinee.email,\n          firstName: pathToData[Item].examinee.firstName,\n          lastName: pathToData[Item].examinee.lastName,\n          code: pathToData[Item].examinee.code,\n          state: pathToData[Item].examinee.state,\n          // test data\n          description: pathToData[Item].test.description,\n          testId: pathToData[Item].test.id,\n          // analytics\n          analytics: pathToData[Item].analytics,\n          // geolocation\n          geoLocation: pathToData[Item].geoLocation,\n          // openTok\n          openTok: pathToData[Item].openTok,\n          // userAgent\n          userAgent: pathToData[Item].userAgent,\n          // images\n          images: pathToData[Item].images,\n          // videos\n          videos: pathToData[Item].videos\n        });\n      } //console.log(loadedData);\n\n\n      setSessions(loadedData);\n      setLoaded(true);\n    });\n  }, []); // memoize data to ensure it is not duplicated on each render\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => sessions, [sessions]); // create table instance\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    nextPage,\n    previousPage,\n    canNextPage,\n    canPreviousPage,\n    pageOptions,\n    prepareRow,\n    selectedFlatRows,\n    state\n  } = useTable({\n    columns: columns,\n    data: data\n  }, // add sorting, filtering, pagination and row select\n  useFilters, useSortBy, usePagination, useRowSelect, // add a column for checkbox to tables\n  hooks => {\n    hooks.visibleColumns.push(columns => {\n      return [{\n        id: 'selection',\n        Header: 'select',\n        Cell: ({\n          row\n        }) => /*#__PURE__*/_jsxDEV(Checkbox, { ...row.getToggleRowSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this)\n      }, ...columns];\n    });\n  }); // destructure global filter and page index from state object\n\n  const {\n    pageIndex\n  } = state; // data from selected row is stored here\n\n  let selectedRows = selectedFlatRows; //console.log(selectedRows);\n\n  const handleViewDetailsRequest = () => {\n    try {\n      // get sessionId of selected row and store in variable\n      const sessionToDisplay = selectedRows[0].original.itemId; // initialize query parameters array\n\n      const queryParams = []; // encode sessionId and push into queryParams as strings\n\n      queryParams.push(encodeURIComponent('itemId') + '=' + encodeURIComponent(sessionToDisplay)); // join queryParams strings and store in variable\n\n      const queryString = queryParams.join('&'); // pass queryString data to ViewSession container via router\n\n      history.push({\n        pathname: '/view-selected-session',\n        search: '?' + queryString\n      });\n    } catch (err) {\n      alert('Please select a session to view');\n    }\n  }; // loop through array of anomalies and count how many have more than one face detected\n\n\n  const countAnomaliesWithMoreThanOneFace = anomaliesArray => {\n    let counter = 0;\n    anomaliesArray.forEach(el => {\n      if (el.faces > 1) {\n        counter++;\n      }\n    });\n    return counter;\n  }; // loop through array of anomalies and count how many have zero faces detected\n\n\n  const countAnomaliesWithZeroFaces = anomaliesArray => {\n    let counter = 0;\n    anomaliesArray.forEach(el => {\n      if (el.faces === 0) {\n        counter++;\n      }\n    });\n    return counter;\n  }; // push relevant data for selected sessions into a new array for CSV export\n\n\n  const selectedData = selectedRows;\n  const dataToExport = [];\n\n  for (const session in selectedData) {\n    dataToExport.push({\n      SessionID: selectedData[session].original.itemId,\n      OrganizationID: selectedData[session].original.sessionOrgId,\n      ExamName: selectedData[session].original.description,\n      ExamID: selectedData[session].original.testId,\n      SessionStart: selectedData[session].original.startTime.toISOString(),\n      // convert to ISO datetime format\n      SessionEnd: selectedData[session].original.endTime.toISOString(),\n      // calculate number of minutes between beginning and end of the exam\n      SessionDuration: selectedData[session].original.endTime.getMinutes() - selectedData[session].original.startTime.getMinutes() + ' minutes',\n      ExamineeFirst: selectedData[session].original.firstName,\n      ExamineeLast: selectedData[session].original.lastName,\n      ExamineeEmail: selectedData[session].original.email,\n      ExamineeState: selectedData[session].original.state,\n      LaunchCode: selectedData[session].original.code,\n      FrameInterval: selectedData[session].original.analytics.postProcess.parameters.interval,\n      GreaterThanOneFaceAnomalies: countAnomaliesWithMoreThanOneFace(selectedData[session].original.analytics.postProcess.anomalies),\n      ZeroFaceAnomalies: countAnomaliesWithZeroFaces(selectedData[session].original.analytics.postProcess.anomalies),\n      TotalAnomalies: selectedData[session].original.analytics.postProcess.anomalies.length,\n      // length of anomalies array\n      ConfidenceLevel: null\n    });\n  } // set headers for CSV export\n\n\n  const csvHeaders = [{\n    label: 'Session ID',\n    key: 'SessionID'\n  }, {\n    label: 'Organization ID',\n    key: 'OrganizationID'\n  }, {\n    label: 'Exam Name',\n    key: 'ExamName'\n  }, {\n    label: 'Exam ID',\n    key: 'ExamID'\n  }, {\n    label: 'Session Start',\n    key: 'SessionStart'\n  }, {\n    label: 'Session End',\n    key: 'SessionEnd'\n  }, {\n    label: 'Session Duration',\n    key: 'SessionDuration'\n  }, {\n    label: 'Examinee First Name',\n    key: 'ExamineeFirst'\n  }, {\n    label: 'Examinee Last Name',\n    key: 'ExamineeLast'\n  }, {\n    label: 'Examinee Email',\n    key: 'ExamineeEmail'\n  }, {\n    label: 'Examinee State',\n    key: 'ExamineeState'\n  }, {\n    label: 'Launch Code',\n    key: 'LaunchCode'\n  }, {\n    label: 'Frame Interval',\n    key: 'FrameInterval'\n  }, {\n    label: '>1 Face Anomalies',\n    key: 'GreaterThanOneFaceAnomalies'\n  }, {\n    label: '0 Face Anomalies',\n    key: 'ZeroFaceAnomalies'\n  }, {\n    label: 'Total Anomalies',\n    key: 'TotalAnomalies'\n  }, {\n    label: 'Confidence Level',\n    key: 'ConfidenceLevel'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.tableWrap,\n    children: loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column =>\n            /*#__PURE__*/\n            // render headers w/ sort functionality\n            _jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n              children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: column.canFilter ? column.render('Filter') : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: column.isSorted ? column.isSortedDesc ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faCaretUp\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 69\n                }, this) : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faCaretDown\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 108\n                }, this) : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: page.map(row => {\n            prepareRow(row);\n            return (\n              /*#__PURE__*/\n              // render table rows\n              _jsxDEV(\"tr\", { ...row.getRowProps(),\n                children: row.cells.map(cell => {\n                  return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                    children: cell.render('Cell')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 30\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 19\n              }, this)\n            );\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.pageButton,\n          onClick: () => previousPage(),\n          disabled: !canPreviousPage,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: classes.pageNum,\n          children: [\"Page\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [pageIndex + 1, \" of \", pageOptions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.pageButton,\n          onClick: () => nextPage(),\n          disabled: !canNextPage,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SmallButton, {\n        clicked: handleViewDetailsRequest,\n        children: \"View Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.spinnerWrap,\n      children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SessionTable, \"B98vteV0QlHjFsm94Nldha1PE+o=\", false, function () {\n  return [useHistory, useTable];\n});\n\n_c = SessionTable;\nexport default _c2 = withRouter(SessionTable);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SessionTable\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/aljou/Documents/Bitbucket/management-portal/src/components/DataTables/Sessions/SessionTable.js"],"names":["React","useMemo","useState","useEffect","useTable","useSortBy","useFilters","usePagination","useRowSelect","Table","axios","withRouter","useHistory","COLUMNS","classes","FontAwesomeIcon","faCaretUp","faCaretDown","Checkbox","SmallButton","Spinner","SessionTable","sessions","setSessions","loaded","setLoaded","history","get","then","res","pathToData","data","result","Items","loadedData","Item","push","itemId","itemType","created","Date","toLocaleDateString","updated","startTime","endTime","sessionOrgId","sessionTestId","sessionUserId","processState","id","examinee","email","firstName","lastName","code","state","description","test","testId","analytics","geoLocation","openTok","userAgent","images","videos","columns","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","prepareRow","selectedFlatRows","hooks","visibleColumns","Header","Cell","row","getToggleRowSelectedProps","pageIndex","selectedRows","handleViewDetailsRequest","sessionToDisplay","original","queryParams","encodeURIComponent","queryString","join","pathname","search","err","alert","countAnomaliesWithMoreThanOneFace","anomaliesArray","counter","forEach","el","faces","countAnomaliesWithZeroFaces","selectedData","dataToExport","session","SessionID","OrganizationID","ExamName","ExamID","SessionStart","toISOString","SessionEnd","SessionDuration","getMinutes","ExamineeFirst","ExamineeLast","ExamineeEmail","ExamineeState","LaunchCode","FrameInterval","postProcess","parameters","interval","GreaterThanOneFaceAnomalies","anomalies","ZeroFaceAnomalies","TotalAnomalies","length","ConfidenceLevel","csvHeaders","label","key","tableWrap","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","canFilter","isSorted","isSortedDesc","getRowProps","cells","cell","getCellProps","pageButton","pageNum","spinnerWrap"],"mappings":"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","sourcesContent":["import React, {useMemo, useState, useEffect} from 'react';\r\nimport {\r\n  useTable, \r\n  useSortBy, \r\n  useFilters, \r\n  usePagination,\r\n  useRowSelect\r\n} from 'react-table';\r\nimport Table from 'react-bootstrap/Table';\r\nimport axios from '../../../axios';\r\nimport {withRouter, useHistory} from 'react-router-dom';\r\n//import {CSVLink} from 'react-csv';\r\n\r\nimport {COLUMNS} from './columns';\r\n\r\nimport classes from './SessionTable.module.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faCaretUp} from '@fortawesome/free-solid-svg-icons';\r\nimport {faCaretDown} from '@fortawesome/free-solid-svg-icons';\r\nimport Checkbox from '../../UI/Checkbox/Checkbox';\r\nimport SmallButton from '../../UI/SmallButton/SmallButton';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\n\r\nconst SessionTable = () => {\r\n  // declare state variables\r\n  const [sessions, setSessions] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  // allow use of history\r\n  const history = useHistory();\r\n\r\n  // get data from api\r\n  useEffect(() => {\r\n    axios.get('/sessions').then(res => {\r\n      //console.log(res.data.result.Items);\r\n      const pathToData = res.data.result.Items\r\n      const loadedData = [];\r\n\r\n      // push data objects into an array\r\n      for (const Item in pathToData) {\r\n        loadedData.push({\r\n          itemId: pathToData[Item].itemId,\r\n          itemType: pathToData[Item].itemType,\r\n          // time data\r\n          created: new Date(pathToData[Item].created).toLocaleDateString(),\r\n          updated: new Date(pathToData[Item].updated).toLocaleDateString(),\r\n          startTime: new Date(pathToData[Item].startTime),\r\n          endTime: new Date(pathToData[Item].endTime),\r\n          // session ids and process state\r\n          sessionOrgId: pathToData[Item].sessionOrgId,\r\n          sessionTestId: pathToData[Item].sessionTestId,\r\n          sessionUserId: pathToData[Item].sessionUserId,\r\n          processState: pathToData[Item].processState,\r\n          // examinee data\r\n          id: pathToData[Item].examinee.id,\r\n          email: pathToData[Item].examinee.email,\r\n          firstName: pathToData[Item].examinee.firstName,\r\n          lastName: pathToData[Item].examinee.lastName,\r\n          code: pathToData[Item].examinee.code,\r\n          state: pathToData[Item].examinee.state,\r\n          // test data\r\n          description: pathToData[Item].test.description,\r\n          testId: pathToData[Item].test.id,\r\n          // analytics\r\n          analytics: pathToData[Item].analytics,\r\n          // geolocation\r\n          geoLocation: pathToData[Item].geoLocation,\r\n          // openTok\r\n          openTok: pathToData[Item].openTok,\r\n          // userAgent\r\n          userAgent: pathToData[Item].userAgent,\r\n          // images\r\n          images: pathToData[Item].images,\r\n          // videos\r\n          videos: pathToData[Item].videos\r\n        });\r\n      }\r\n      //console.log(loadedData);\r\n      setSessions(loadedData);\r\n      setLoaded(true);\r\n    });\r\n  }, []);\r\n\r\n  // memoize data to ensure it is not duplicated on each render\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => sessions, [sessions]);\r\n\r\n  // create table instance\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    canNextPage,\r\n    canPreviousPage,\r\n    pageOptions,\r\n    prepareRow,\r\n    selectedFlatRows,\r\n    state,\r\n  } = useTable(\r\n    {\r\n      columns: columns,\r\n      data: data\r\n    },\r\n    // add sorting, filtering, pagination and row select\r\n    useFilters, useSortBy, usePagination, useRowSelect,\r\n    // add a column for checkbox to tables\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => {\r\n        return [\r\n          {\r\n            id: 'selection',\r\n            Header: 'select',\r\n            Cell: ({row}) => (\r\n              <Checkbox {...row.getToggleRowSelectedProps()} />\r\n            )\r\n          },\r\n          ...columns\r\n        ]\r\n      });\r\n    }\r\n  );\r\n\r\n  // destructure global filter and page index from state object\r\n  const {pageIndex} =  state;\r\n\r\n  // data from selected row is stored here\r\n  let selectedRows = selectedFlatRows\r\n  //console.log(selectedRows);\r\n\r\n  const handleViewDetailsRequest = () => {\r\n    try {\r\n      // get sessionId of selected row and store in variable\r\n      const sessionToDisplay = selectedRows[0].original.itemId;\r\n\r\n      // initialize query parameters array\r\n      const queryParams = [];\r\n\r\n      // encode sessionId and push into queryParams as strings\r\n      queryParams.push(encodeURIComponent('itemId') + '=' + encodeURIComponent(sessionToDisplay));\r\n\r\n      // join queryParams strings and store in variable\r\n      const queryString = queryParams.join('&');\r\n      \r\n      // pass queryString data to ViewSession container via router\r\n      history.push({\r\n        pathname: '/view-selected-session',\r\n        search: '?' + queryString\r\n      });\r\n    } catch(err) {\r\n      alert('Please select a session to view')\r\n    }\r\n  }\r\n\r\n  // loop through array of anomalies and count how many have more than one face detected\r\n  const countAnomaliesWithMoreThanOneFace = (anomaliesArray) => {\r\n    let counter = 0;\r\n    anomaliesArray.forEach(el => {\r\n      if (el.faces > 1) {\r\n        counter++;\r\n      }\r\n    });\r\n    return counter;\r\n  }\r\n\r\n  // loop through array of anomalies and count how many have zero faces detected\r\n  const countAnomaliesWithZeroFaces = (anomaliesArray) => {\r\n    let counter = 0;\r\n    anomaliesArray.forEach(el => {\r\n      if (el.faces === 0) {\r\n        counter++;\r\n      }\r\n    });\r\n    return counter;\r\n  }\r\n\r\n  // push relevant data for selected sessions into a new array for CSV export\r\n  const selectedData = selectedRows;\r\n  const dataToExport = [];\r\n  for (const session in selectedData) {\r\n    dataToExport.push({\r\n      SessionID: selectedData[session].original.itemId,\r\n      OrganizationID: selectedData[session].original.sessionOrgId,\r\n      ExamName: selectedData[session].original.description,\r\n      ExamID: selectedData[session].original.testId,\r\n      SessionStart: selectedData[session].original.startTime.toISOString(), // convert to ISO datetime format\r\n      SessionEnd: selectedData[session].original.endTime.toISOString(),\r\n      // calculate number of minutes between beginning and end of the exam\r\n      SessionDuration: (selectedData[session].original.endTime.getMinutes()) - (selectedData[session].original.startTime.getMinutes()) + ' minutes',\r\n      ExamineeFirst: selectedData[session].original.firstName,\r\n      ExamineeLast: selectedData[session].original.lastName,\r\n      ExamineeEmail: selectedData[session].original.email,\r\n      ExamineeState: selectedData[session].original.state,\r\n      LaunchCode: selectedData[session].original.code,\r\n      FrameInterval: selectedData[session].original.analytics.postProcess.parameters.interval,\r\n      GreaterThanOneFaceAnomalies: countAnomaliesWithMoreThanOneFace(selectedData[session].original.analytics.postProcess.anomalies),\r\n      ZeroFaceAnomalies: countAnomaliesWithZeroFaces(selectedData[session].original.analytics.postProcess.anomalies),\r\n      TotalAnomalies: selectedData[session].original.analytics.postProcess.anomalies.length, // length of anomalies array\r\n      ConfidenceLevel: null\r\n    });\r\n  }\r\n\r\n  // set headers for CSV export\r\n  const csvHeaders = [\r\n    {label: 'Session ID', key: 'SessionID'},\r\n    {label: 'Organization ID', key: 'OrganizationID'},\r\n    {label: 'Exam Name', key: 'ExamName'},\r\n    {label: 'Exam ID', key: 'ExamID'},\r\n    {label: 'Session Start', key: 'SessionStart'},\r\n    {label: 'Session End', key: 'SessionEnd'},\r\n    {label: 'Session Duration', key: 'SessionDuration'},\r\n    {label: 'Examinee First Name', key: 'ExamineeFirst'},\r\n    {label: 'Examinee Last Name', key: 'ExamineeLast'},\r\n    {label: 'Examinee Email', key: 'ExamineeEmail'},\r\n    {label: 'Examinee State', key: 'ExamineeState'},\r\n    {label: 'Launch Code', key: 'LaunchCode'},\r\n    {label: 'Frame Interval', key: 'FrameInterval'},\r\n    {label: '>1 Face Anomalies', key: 'GreaterThanOneFaceAnomalies'},\r\n    {label: '0 Face Anomalies', key: 'ZeroFaceAnomalies'},\r\n    {label: 'Total Anomalies', key: 'TotalAnomalies'},\r\n    {label: 'Confidence Level', key: 'ConfidenceLevel'}\r\n  ]\r\n\r\n  return (\r\n    <div className={classes.tableWrap}>\r\n      {/* if data is loaded, render table and associated components. if not, render loading spinner */}\r\n      {loaded \r\n        ? \r\n        <div>\r\n          {/* render table */}\r\n          <Table {...getTableProps()} striped bordered hover>\r\n            <thead>\r\n              {headerGroups.map((headerGroup) => (\r\n                  <tr {...headerGroup.getHeaderGroupProps()}>\r\n                    {headerGroup.headers.map((column) => (\r\n                      // render headers w/ sort functionality\r\n                      <th {...column.getHeaderProps(column.getSortByToggleProps())}>  \r\n                        {column.render('Header')}\r\n                        {/* if column is authorized for filtering, render filter */}\r\n                        <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                        <span>\r\n                          {column.isSorted ? (column.isSortedDesc ? <FontAwesomeIcon icon={faCaretUp} /> : <FontAwesomeIcon icon={faCaretDown} />) : ''}\r\n                        </span>\r\n                      </th>\r\n                    ))} \r\n                  </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {page.map(row => {\r\n                prepareRow(row)\r\n                return (\r\n                  // render table rows\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map((cell) => {\r\n                      return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                    })}\r\n                  </tr>\r\n                )\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n          <div>\r\n            {/* render pagination buttons */}\r\n            <button\r\n              className={classes.pageButton} \r\n              onClick={() => previousPage()}\r\n              disabled={!canPreviousPage}\r\n            >Previous</button>\r\n            <span className={classes.pageNum}>\r\n              Page{' '}\r\n              <strong>\r\n                {pageIndex + 1} of {pageOptions.length}\r\n              </strong>\r\n            </span>\r\n            <button\r\n              className={classes.pageButton} \r\n              onClick={() => nextPage()}\r\n              disabled={!canNextPage}\r\n            >Next</button>\r\n          </div>\r\n          <br/>\r\n          {/* link to view details for selected session */}\r\n          <SmallButton clicked={handleViewDetailsRequest}>View Details</SmallButton>\r\n\r\n          {/* link to export selected sessions to csv file */}\r\n          {/* <CSVLink\r\n            data={dataToExport}\r\n            headers={csvHeaders}\r\n            filename={'session-data.csv'}\r\n          >\r\n            <SmallButton>Export to CSV</SmallButton>\r\n          </CSVLink> */}\r\n        </div>\r\n        :\r\n        <div className={classes.spinnerWrap}> \r\n          <Spinner/>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\nexport default withRouter(SessionTable);\r\n"]},"metadata":{},"sourceType":"module"}