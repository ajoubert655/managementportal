{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aljou\\\\Documents\\\\Bitbucket\\\\management-portal\\\\src\\\\components\\\\DataTables\\\\Tests\\\\TestTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, usePagination, useRowSelect } from 'react-table';\nimport Table from 'react-bootstrap/Table';\nimport axios from '../../../axios';\nimport { Link, withRouter, useHistory } from 'react-router-dom';\nimport { COLUMNS } from './columns';\nimport TableFilter from '../../UI/TableFilter/TableFilter';\nimport classes from './TestTable.module.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\nimport Checkbox from '../../UI/Checkbox/Checkbox';\nimport SmallButton from '../../UI/SmallButton/SmallButton';\nimport Spinner from '../../UI/Spinner/Spinner';\n\nconst TestTable = () => {\n  _s();\n\n  const [tests, setTests] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const history = useHistory(); // get data from api\n\n  useEffect(() => {\n    axios.get('/tests').then(res => {\n      //console.log(res.data.result.Items);\n      const pathToData = res.data.result.Items;\n      const loadedData = []; // push data objects into an array\n\n      for (const Item in pathToData) {\n        loadedData.push({\n          id: pathToData[Item].id,\n          itemId: pathToData[Item].itemId,\n          itemType: pathToData[Item].itemType,\n          testOrgId: pathToData[Item].testOrgId,\n          description: pathToData[Item].description,\n          tds: pathToData[Item].tds,\n          created: pathToData[Item].created,\n          updated: pathToData[Item].updated\n        });\n      } // update state\n\n\n      setTests(loadedData);\n      setLoaded(true);\n    });\n  }, []); // memoize data to ensure it is not duplicated on each render\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => tests, [tests]); // create table instance\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    nextPage,\n    previousPage,\n    canNextPage,\n    canPreviousPage,\n    pageOptions,\n    prepareRow,\n    selectedFlatRows,\n    state,\n    setGlobalFilter\n  } = useTable({\n    columns: columns,\n    data: data\n  }, // add sorting, filtering, pagination and row select\n  useGlobalFilter, useSortBy, usePagination, useRowSelect, // add a column for checkbox to tables\n  hooks => {\n    hooks.visibleColumns.push(columns => {\n      return [{\n        id: 'selection',\n        Header: 'select',\n        Cell: ({\n          row\n        }) => /*#__PURE__*/_jsxDEV(Checkbox, { ...row.getToggleRowSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this)\n      }, ...columns];\n    });\n  }); // destructure global filter and page index from state object\n\n  const {\n    globalFilter,\n    pageIndex\n  } = state; // data from selected row is stored here\n\n  let selectedRow = selectedFlatRows;\n  console.log(selectedRow); // handle edit button click\n\n  const HandleEditRequest = () => {\n    // get properties to be passed to form and store in variable\n    const itemToEdit = selectedRow[0].original; // initialize query parameters array\n\n    const queryParams = []; // loop through itemToEdit, encode data, and push into queryParams as strings\n\n    for (let i in itemToEdit) {\n      queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(itemToEdit[i]));\n    } // join queryParams strings and store in variable\n\n\n    const queryString = queryParams.join('&'); // pass queryString data to EditTestForm via router\n\n    history.push({\n      pathname: '/edit-test',\n      search: '?' + queryString\n    });\n  }; // handle delete button click\n\n\n  const handleDeleteRequest = () => {\n    // get id of test to be deleted from selectedRow object\n    let itemToDelete = selectedRow[0].original.id; // make axios call, then reload page\n\n    axios.delete(`/tests/${itemToDelete}`).then(response => {\n      window.location.reload();\n    }).catch(error => alert(error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.tableWrap,\n    children: loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.toolBarWrap,\n        children: [/*#__PURE__*/_jsxDEV(TableFilter, {\n          filter: globalFilter,\n          setFilter: setGlobalFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: '/add-test'\n          },\n          children: /*#__PURE__*/_jsxDEV(SmallButton, {\n            children: \"Add New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 48\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column =>\n            /*#__PURE__*/\n            // render headers w/ sort functionality\n            _jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n              children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: column.isSorted ? column.isSortedDesc ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faCaretUp\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 69\n                }, this) : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faCaretDown\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 108\n                }, this) : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: page.map(row => {\n            prepareRow(row);\n            return (\n              /*#__PURE__*/\n              // render table rows\n              _jsxDEV(\"tr\", { ...row.getRowProps(),\n                children: row.cells.map(cell => {\n                  return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                    children: cell.render('Cell')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 30\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 19\n              }, this)\n            );\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.pageButton,\n          onClick: () => previousPage(),\n          disabled: !canPreviousPage,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: classes.pageNum,\n          children: [\"Page\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [pageIndex + 1, \" of \", pageOptions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.pageButton,\n          onClick: () => nextPage(),\n          disabled: !canNextPage,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SmallButton, {\n        clicked: HandleEditRequest,\n        children: \"\\xA0\\xA0Edit\\xA0\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SmallButton, {\n        clicked: handleDeleteRequest,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.spinnerWrap,\n      children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TestTable, \"9YVwNhruRUFZBCCwcFP8fX325Oo=\", false, function () {\n  return [useHistory, useTable];\n});\n\n_c = TestTable;\nexport default _c2 = withRouter(TestTable);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TestTable\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/aljou/Documents/Bitbucket/management-portal/src/components/DataTables/Tests/TestTable.js"],"names":["React","useMemo","useState","useEffect","useTable","useSortBy","useGlobalFilter","usePagination","useRowSelect","Table","axios","Link","withRouter","useHistory","COLUMNS","TableFilter","classes","FontAwesomeIcon","faCaretUp","faCaretDown","Checkbox","SmallButton","Spinner","TestTable","tests","setTests","loaded","setLoaded","history","get","then","res","pathToData","data","result","Items","loadedData","Item","push","id","itemId","itemType","testOrgId","description","tds","created","updated","columns","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","prepareRow","selectedFlatRows","state","setGlobalFilter","hooks","visibleColumns","Header","Cell","row","getToggleRowSelectedProps","globalFilter","pageIndex","selectedRow","console","log","HandleEditRequest","itemToEdit","original","queryParams","i","encodeURIComponent","queryString","join","pathname","search","handleDeleteRequest","itemToDelete","delete","response","window","location","reload","catch","error","alert","tableWrap","toolBarWrap","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","cell","getCellProps","pageButton","pageNum","length","spinnerWrap"],"mappings":"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","sourcesContent":["import React, {useMemo, useState, useEffect} from 'react';\r\nimport {\r\n  useTable, \r\n  useSortBy, \r\n  useGlobalFilter, \r\n  usePagination,\r\n  useRowSelect\r\n} from 'react-table';\r\nimport Table from 'react-bootstrap/Table';\r\nimport axios from '../../../axios';\r\nimport {Link, withRouter, useHistory} from 'react-router-dom';\r\n\r\nimport {COLUMNS} from './columns';\r\nimport TableFilter from '../../UI/TableFilter/TableFilter';\r\n\r\nimport classes from './TestTable.module.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faCaretUp} from '@fortawesome/free-solid-svg-icons';\r\nimport {faCaretDown} from '@fortawesome/free-solid-svg-icons';\r\nimport Checkbox from '../../UI/Checkbox/Checkbox';\r\nimport SmallButton from '../../UI/SmallButton/SmallButton';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\n\r\nconst TestTable = () => {\r\n  const [tests, setTests] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const history = useHistory();\r\n\r\n  // get data from api\r\n  useEffect(() => {\r\n    axios.get('/tests').then(res => {\r\n      //console.log(res.data.result.Items);\r\n      const pathToData = res.data.result.Items\r\n      const loadedData = [];\r\n\r\n      // push data objects into an array\r\n      for (const Item in pathToData) {\r\n        loadedData.push({\r\n          id: pathToData[Item].id,\r\n          itemId: pathToData[Item].itemId,\r\n          itemType: pathToData[Item].itemType,\r\n          testOrgId: pathToData[Item].testOrgId,\r\n          description: pathToData[Item].description,\r\n          tds: pathToData[Item].tds,\r\n          created: pathToData[Item].created,\r\n          updated: pathToData[Item].updated\r\n        });\r\n      }\r\n      // update state\r\n      setTests(loadedData);\r\n      setLoaded(true);\r\n    });\r\n  }, []);\r\n\r\n  // memoize data to ensure it is not duplicated on each render\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => tests, [tests]);\r\n\r\n  // create table instance\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    canNextPage,\r\n    canPreviousPage,\r\n    pageOptions,\r\n    prepareRow,\r\n    selectedFlatRows,\r\n    state,\r\n    setGlobalFilter,\r\n  } = useTable(\r\n    {\r\n      columns: columns,\r\n      data: data\r\n    },\r\n    // add sorting, filtering, pagination and row select\r\n    useGlobalFilter,  useSortBy, usePagination, useRowSelect,\r\n    // add a column for checkbox to tables\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => {\r\n        return [\r\n          {\r\n            id: 'selection',\r\n            Header: 'select',\r\n            Cell: ({row}) => (\r\n              <Checkbox {...row.getToggleRowSelectedProps()} />\r\n            )\r\n          },\r\n          ...columns\r\n        ]\r\n      });\r\n    }\r\n  );\r\n\r\n  // destructure global filter and page index from state object\r\n  const {globalFilter, pageIndex} =  state;\r\n\r\n  // data from selected row is stored here\r\n  let selectedRow = selectedFlatRows\r\n  console.log(selectedRow);\r\n\r\n  // handle edit button click\r\n  const HandleEditRequest = () => {\r\n    // get properties to be passed to form and store in variable\r\n    const itemToEdit = selectedRow[0].original;\r\n    // initialize query parameters array\r\n    const queryParams = [];\r\n\r\n    // loop through itemToEdit, encode data, and push into queryParams as strings\r\n    for (let i in itemToEdit) {\r\n      queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(itemToEdit[i]));\r\n    }\r\n    // join queryParams strings and store in variable\r\n    const queryString = queryParams.join('&');\r\n\r\n    // pass queryString data to EditTestForm via router\r\n    history.push({\r\n      pathname: '/edit-test',\r\n      search: '?' + queryString\r\n    });\r\n  }\r\n\r\n  // handle delete button click\r\n  const handleDeleteRequest = () => {\r\n    // get id of test to be deleted from selectedRow object\r\n    let itemToDelete = selectedRow[0].original.id\r\n    \r\n    // make axios call, then reload page\r\n    axios.delete(`/tests/${itemToDelete}`)\r\n         .then(response => {\r\n          window.location.reload();\r\n         })\r\n         .catch(error => alert(error));\r\n  }\r\n\r\n  return (\r\n    <div className={classes.tableWrap}>\r\n      {/* if data is loaded, render table and associated components. if not, render loading spinner */}\r\n      {loaded ? \r\n        <div>\r\n          <div className={classes.toolBarWrap}>\r\n            {/* render filter field, with globalFilter and setGlobalFilter passed as props */}\r\n            <TableFilter filter={globalFilter} setFilter={setGlobalFilter} />\r\n            <Link to={{pathname: '/add-test'}}><SmallButton>Add New</SmallButton></Link>\r\n          </div>\r\n\r\n          {/* render table */}\r\n          <Table {...getTableProps()} striped bordered hover>\r\n            <thead>\r\n              {headerGroups.map((headerGroup) => (\r\n                  <tr {...headerGroup.getHeaderGroupProps()}>\r\n                    {headerGroup.headers.map((column) => (\r\n                      // render headers w/ sort functionality\r\n                      <th {...column.getHeaderProps(column.getSortByToggleProps())}>  \r\n                        {column.render('Header')}\r\n                        <span>\r\n                          {column.isSorted ? (column.isSortedDesc ? <FontAwesomeIcon icon={faCaretUp} /> : <FontAwesomeIcon icon={faCaretDown} />) : ''}\r\n                        </span>\r\n                      </th>\r\n                    ))} \r\n                  </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {page.map(row => {\r\n                prepareRow(row)\r\n                return (\r\n                  // render table rows\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map((cell) => {\r\n                      return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                    })}\r\n                  </tr>\r\n                )\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n          <div>\r\n            {/* render pagination buttons */}\r\n            <button\r\n              className={classes.pageButton} \r\n              onClick={() => previousPage()}\r\n              disabled={!canPreviousPage}\r\n            >Previous</button>\r\n            <span className={classes.pageNum}>\r\n              Page{' '}\r\n              <strong>\r\n                {pageIndex + 1} of {pageOptions.length}\r\n              </strong>\r\n            </span>\r\n            <button\r\n              className={classes.pageButton} \r\n              onClick={() => nextPage()}\r\n              disabled={!canNextPage}\r\n            >Next</button>\r\n          </div>\r\n          <br/>\r\n          <SmallButton clicked={HandleEditRequest}>&nbsp;&nbsp;Edit&nbsp;&nbsp;</SmallButton>\r\n          <SmallButton clicked={handleDeleteRequest}>Delete</SmallButton>\r\n        </div>\r\n      : \r\n        <div className={classes.spinnerWrap}>\r\n          <Spinner />\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\nexport default withRouter(TestTable);"]},"metadata":{},"sourceType":"module"}