{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\aljou\\\\Documents\\\\Bitbucket\\\\management-portal\\\\src\\\\containers\\\\TestForm\\\\TestForm.js\";\nimport React, { Component } from 'react';\nimport axios from '../../axios';\nimport { withRouter } from 'react-router-dom';\nimport classes from './TestForm.module.css';\nimport Heading2 from '../../components/Form Inputs/Heading2/Heading2';\n\nclass TestForm extends Component {\n  constructor() {\n    super();\n\n    this.formValChange = e => {\n      e.preventDefault();\n      const {\n        name,\n        value\n      } = e.target;\n      let isError = { ...this.state.isError\n      };\n\n      switch (name) {\n        case \"itemType\":\n          isError.itemType = value = \"\" ? \"This field is required\" : \"\";\n          break;\n\n        case \"testOrgId\":\n          isError.testOrgId = value = \"\" ? \"This field is required\" : \"\";\n          break;\n\n        case \"id\":\n          isError.id = value = \"\" ? \"This field is required?\" : \"\";\n          break;\n\n        case \"description\":\n          isError.description = value = \"\" ? \"This field is required?\" : \"\";\n          break;\n\n        case \"tds\":\n          isError.tds = value = \"\" ? \"This field is required?\" : \"\";\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        isError,\n        [name]: value\n      });\n    };\n\n    this.state = {\n      itemType: \"\",\n      testOrgId: \"\",\n      id: \"\",\n      description: \"\",\n      tds: \"\",\n      isError: {\n        itemType: \"\",\n        testOrgId: \"\",\n        id: \"\",\n        description: \"\",\n        tds: \"\"\n      }\n    };\n    this.handleItemTypeChange = this.handleItemTypeChange.bind(this);\n    this.handleTestOrgIdChange = this.handleTestOrgIdChange.bind(this);\n    this.handleIdChange = this.handleIdChange.bind(this);\n    this.handleTdsChange = this.handleTdsChange.bind(this);\n    this.handleDescriptionChange = this.handleDescriptionChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } // whenever a change is made to an input field, update the corresponding state property\n\n\n  handleItemTypeChange(event) {\n    this.setState({\n      itemType: event.target.value\n    });\n    this.formValChange;\n  }\n\n  handleTestOrgIdChange(event) {\n    this.setState({\n      testOrgId: event.target.value\n    });\n    this.formValChange;\n  }\n\n  handleIdChange(event) {\n    this.setState({\n      id: event.target.value\n    });\n    this.formValChange;\n  }\n\n  handleDescriptionChange(event) {\n    this.setState({\n      description: event.target.value\n    });\n    this.formValChange;\n  }\n\n  handleTdsChange(event) {\n    this.setState({\n      tds: event.target.value\n    });\n    this.formValChange;\n  }\n\n  handleSubmit(event) {\n    // prevent default submit action\n    event.preventDefault();\n\n    if (formValid(this.state)) {\n      console.log(this.state); // distribute data stored in state into new object\n\n      const formData = { ...this.state\n      }; // make api call to post data\n\n      axios.post('/tests', formData).then(response => console.log(response)).catch(error => console.log(error)); //redirect to confirmation page\n\n      this.props.history.push('/add-test-confirmation');\n    } else {\n      alert(\"One or more required fields are missing\");\n    }\n  }\n\n  render() {\n    const {\n      isError\n    } = this.state;\n    const labelstyle = {\n      color: \"#3cB650\",\n      fontFamily: \"sans-serif\",\n      fontWeight: \"400\",\n      padding: \"20px 75px 20px 0\",\n      position: \"relative\",\n      textRendering: \"optimizeLegibility\",\n      display: \"inline-block\",\n      width: \"100%\"\n    };\n    const textbxstyle = {\n      width: \"70%\",\n      padding: \"12px 20px\",\n      margin: \"8px 0\",\n      border: \"1px solid #ccc\",\n      borderRadius: \"4px\",\n      boxSizing: \"border-box\",\n      display: \"inline-block\"\n    };\n    const buttonstyle = {\n      backgroundColor: \"#4CAF50\",\n      border: \"none\",\n      color: \"white\",\n      padding: \"10px 22px\",\n      textAlign: \"center\",\n      textDecoration: \"none\",\n      display: \"inline-block\",\n      fontSize: \"16px\",\n      margin: \"4px 2px\",\n      cursor: \"pointer\",\n      borderRadius: \"30px\"\n    };\n\n    const formValid = ({\n      isError,\n      ...rest\n    }) => {\n      let isValid = false;\n      Object.values(isError).forEach(val => {\n        if (val.length > 0) {\n          isValid = false;\n        } else {\n          isValid = true;\n        }\n      });\n      Object.values(rest).forEach(val => {\n        if (val === null) {\n          isValid = false;\n        } else {\n          isValid = true;\n        }\n      });\n      return isValid;\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        className: classes.main,\n        children: [/*#__PURE__*/_jsxDEV(Heading2, {\n          children: \"Add Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.wrapper,\n          onSubmit: this.handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.flexChild,\n              children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n                children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: classes.cell1,\n                      style: {\n                        textAlign: \"right\"\n                      },\n                      children: /*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"itemType\",\n                        style: labelstyle,\n                        children: \"Item Type(TST):\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 195,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 191,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: classes.cell2,\n                      style: {\n                        textAlign: \"left\",\n                        width: \"30%\"\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        style: textbxstyle,\n                        type: \"text\",\n                        id: \"itemType\",\n                        name: \"itemType\",\n                        value: this.state.itemType,\n                        onChange: this.handleItemTypeChange,\n                        onBlur: this.formValChange\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 205,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          color: \"red\"\n                        },\n                        children: isError.itemType\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 214,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 201,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: classes.cell1,\n                      style: {\n                        textAlign: \"right\"\n                      },\n                      children: /*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"testOrgId\",\n                        style: labelstyle,\n                        children: \"Organization ID:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 225,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 221,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: classes.cell2,\n                      style: {\n                        textAlign: \"left\"\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        style: textbxstyle // onBlur = {()=> this.ValidatorToI()} \n                        ,\n                        type: \"text\",\n                        id: \"testOrgId\",\n                        name: \"testOrgId\",\n                        value: this.state.testOrgId,\n                        onChange: this.handleTestOrgIdChange\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 235,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          color: \"red\"\n                        },\n                        children: isError.itemType\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 244,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 231,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: classes.cell1,\n                      style: {\n                        textAlign: \"right\"\n                      },\n                      children: /*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"id\",\n                        style: labelstyle,\n                        children: \"Test ID:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 256,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 252,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: classes.cell2,\n                      style: {\n                        textAlign: \"left\"\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        style: textbxstyle // onBlur = {()=> this.ValidatorTid()}\n                        ,\n                        type: \"text\",\n                        id: \"id\",\n                        name: \"id\",\n                        value: this.state.id,\n                        onChange: this.handleIdChange\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 266,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          color: \"red\"\n                        },\n                        children: isError.itemType\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 275,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 262,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: classes.cell1,\n                      style: {\n                        textAlign: \"right\"\n                      },\n                      children: /*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"description\",\n                        style: labelstyle,\n                        children: \"Description:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 287,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 283,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: classes.cell2,\n                      style: {\n                        textAlign: \"left\",\n                        width: \"30%\"\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        style: textbxstyle,\n                        type: \"text\",\n                        id: \"description\",\n                        name: \"description\",\n                        value: this.state.description,\n                        onChange: this.handleDescriptionChange\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 297,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          color: \"red\"\n                        },\n                        children: isError.itemType\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 305,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 293,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: classes.cell1,\n                      style: {\n                        textAlign: \"right\"\n                      },\n                      children: /*#__PURE__*/_jsxDEV(\"label\", {\n                        htmlFor: \"tds\",\n                        style: labelstyle,\n                        children: \"Test Delivery System:\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 317,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 313,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: classes.cell2,\n                      style: {\n                        textAlign: \"left\"\n                      },\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        style: textbxstyle // onBlur = {()=> this.Validatortds()} \n                        ,\n                        type: \"text\",\n                        id: \"tds\",\n                        name: \"tds\",\n                        value: this.state.tds,\n                        onChange: this.handleTdsChange\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 327,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        style: {\n                          color: \"red\"\n                        },\n                        children: isError.itemType\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 336,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 323,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 312,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.flexChild,\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: /*#__PURE__*/_jsxDEV(\"td\", {\n                      className: classes.cell8,\n                      style: {\n                        textAlign: \"center\",\n                        paddingLeft: \"2%\",\n                        paddingTop: \"2%\"\n                      },\n                      children: /*#__PURE__*/_jsxDEV(\"input\", {\n                        style: buttonstyle,\n                        type: \"submit\",\n                        value: \"Submit\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 353,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 349,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 348,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(TestForm); // ValidatorItemType() {\n//   if (this.state.itemtype === \"\")\n//     {\n//       this.setState ({emptyErroritype: \"This field cannot be empty\"})\n//     }\n//     else \n//     {\n//       this.setState ({emptyErroritype: \"\"})\n//     }\n//   }\n//   ValidatorToI() {\n//     if (this.state.testorgid === \"\" )\n//     {\n//       this.setState ({emptyErrortestOid: \"This field cannot be empty\"})\n//     }\n//     else \n//     {\n//       this.setState ({emptyErrortestOid: \"\"})\n//     }\n//   }\n//   ValidatorTid() {\n//     if (this.state.testid === \"\")\n//     {\n//       this.setState ({emptyErrortestid: \"This field cannot be empty\"})\n//     }\n//     else \n//     {\n//       this.setState ({emptyErrortestid: \"\"})\n//     }\n//   }\n//   Validatortds() {\n//     if (this.state.tds === \"\" )\n//     {\n//       this.setState ({emptyErrortds: \"This field cannot be empty\"})\n//     }\n//     else \n//     {\n//       this.setState ({emptyErrortds: \"\"})\n//     }\n//   }\n//   SubmitValidator() {\n//       if (this.state.itemtype === \"\" || this.state.testorgid === \"\" || this.state.testid === \"\" || this.state.tds === \"\" ) {\n//         alert(\"A required field is missing\")\n//       }\n//   }\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/aljou/Documents/Bitbucket/management-portal/src/containers/TestForm/TestForm.js"],"names":["React","Component","axios","withRouter","classes","Heading2","TestForm","constructor","formValChange","e","preventDefault","name","value","target","isError","state","itemType","testOrgId","id","description","tds","setState","handleItemTypeChange","bind","handleTestOrgIdChange","handleIdChange","handleTdsChange","handleDescriptionChange","handleSubmit","event","formValid","console","log","formData","post","then","response","catch","error","props","history","push","alert","render","labelstyle","color","fontFamily","fontWeight","padding","position","textRendering","display","width","textbxstyle","margin","border","borderRadius","boxSizing","buttonstyle","backgroundColor","textAlign","textDecoration","fontSize","cursor","rest","isValid","Object","values","forEach","val","length","main","wrapper","flexChild","cell1","cell2","cell8","paddingLeft","paddingTop"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from '../../axios';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nimport classes from './TestForm.module.css';\r\nimport Heading2 from '../../components/Form Inputs/Heading2/Heading2';\r\n\r\nclass TestForm extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      itemType: \"\",\r\n      testOrgId: \"\",\r\n      id: \"\",\r\n      description: \"\",\r\n      tds: \"\",\r\n      isError: {\r\n        itemType: \"\",\r\n        testOrgId: \"\",\r\n        id: \"\",\r\n        description: \"\",\r\n        tds: \"\",\r\n      }\r\n    }\r\n   \r\n\r\n    this.handleItemTypeChange = this.handleItemTypeChange.bind(this);\r\n    this.handleTestOrgIdChange = this.handleTestOrgIdChange.bind(this);\r\n    this.handleIdChange = this.handleIdChange.bind(this);\r\n    this.handleTdsChange = this.handleTdsChange.bind(this);\r\n    this.handleDescriptionChange = this.handleDescriptionChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  // whenever a change is made to an input field, update the corresponding state property\r\n  handleItemTypeChange(event) {\r\n    this.setState({itemType: event.target.value});\r\n    this.formValChange\r\n  }\r\n\r\n  handleTestOrgIdChange(event) {\r\n    this.setState({testOrgId: event.target.value});\r\n    this.formValChange\r\n  }\r\n\r\n  handleIdChange(event) {\r\n    this.setState({id: event.target.value});\r\n    this.formValChange\r\n  }\r\n\r\n  handleDescriptionChange(event) {\r\n    this.setState({description: event.target.value});\r\n    this.formValChange\r\n  }\r\n\r\n  handleTdsChange(event) {\r\n    this.setState({tds: event.target.value});\r\n    this.formValChange\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    // prevent default submit action\r\n    event.preventDefault();\r\n\r\n    if (formValid(this.state)) {\r\n    console.log(this.state)\r\n        \r\n    // distribute data stored in state into new object\r\n    const formData = {...this.state}\r\n\r\n    // make api call to post data\r\n    axios.post('/tests', formData)\r\n         .then(response => console.log(response))\r\n         .catch(error => console.log(error));\r\n\r\n    //redirect to confirmation page\r\n    this.props.history.push('/add-test-confirmation')\r\n    }\r\n    else {\r\n      alert(\"One or more required fields are missing\")\r\n    }\r\n  }\r\n\r\n  formValChange = e => {\r\n    e.preventDefault();\r\n    const { name, value } = e.target;\r\n    let isError = { ...this.state.isError };\r\n\r\n    switch (name) {\r\n        case \"itemType\":\r\n            isError.itemType =\r\n                value = \"\"? \"This field is required\" : \"\";\r\n            break;\r\n        case \"testOrgId\":\r\n            isError.testOrgId = value = \"\"? \"This field is required\": \"\";\r\n            break;\r\n        case \"id\":\r\n            isError.id =\r\n                value = \"\"? \"This field is required?\": \"\";\r\n            break;\r\n        case \"description\":\r\n            isError.description =\r\n                value = \"\"? \"This field is required?\": \"\";\r\n            break;\r\n        case \"tds\":\r\n            isError.tds =\r\n                value = \"\"? \"This field is required?\": \"\";\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    this.setState({\r\n        isError,\r\n        [name]: value\r\n    })\r\n};\r\n\r\n  render () {\r\n    \r\n    const { isError } = this.state\r\n\r\n    const labelstyle = {\r\n      color: \"#3cB650\",\r\n      fontFamily: \"sans-serif\",\r\n      fontWeight: \"400\",\r\n      padding: \"20px 75px 20px 0\",\r\n      position: \"relative\",\r\n      textRendering: \"optimizeLegibility\",\r\n      display: \"inline-block\",\r\n      width: \"100%\"\r\n      };\r\n  \r\n    const textbxstyle = {\r\n      width: \"70%\",\r\n      padding: \"12px 20px\",\r\n      margin: \"8px 0\",\r\n      border: \"1px solid #ccc\",\r\n      borderRadius: \"4px\",\r\n      boxSizing: \"border-box\",\r\n      display: \"inline-block\"\r\n    }; \r\n\r\n    const buttonstyle = {\r\n      backgroundColor: \"#4CAF50\",\r\n      border: \"none\",\r\n      color: \"white\",\r\n      padding: \"10px 22px\",\r\n      textAlign: \"center\",\r\n      textDecoration: \"none\",\r\n      display: \"inline-block\",\r\n      fontSize: \"16px\",\r\n      margin: \"4px 2px\",\r\n      cursor: \"pointer\",\r\n      borderRadius:\"30px\",\r\n    };\r\n\r\n    const formValid = ({ isError, ...rest }) => {\r\n      let isValid = false;\r\n  \r\n      Object.values(isError).forEach(val => {\r\n          if (val.length > 0) {\r\n              isValid = false\r\n          } else {\r\n              isValid = true\r\n          }\r\n      });\r\n  \r\n      Object.values(rest).forEach(val => {\r\n          if (val === null) {\r\n              isValid = false\r\n          } else {\r\n              isValid = true\r\n          }\r\n      });\r\n      return isValid;\r\n  };\r\n  \r\n\r\n    return (\r\n      <div>\r\n        <main className={classes.main}>\r\n          <Heading2>Add Test</Heading2>\r\n          <form className={classes.wrapper} onSubmit={this.handleSubmit}>\r\n            <fieldset>\r\n              <div className={classes.flexChild}>\r\n                <br/>\r\n                <table>\r\n                  <tbody>\r\n                    <tr >\r\n                      <td \r\n                        className={classes.cell1}  \r\n                        style={{textAlign:\"right\"}}\r\n                      >\r\n                        <label \r\n                          htmlFor=\"itemType\" \r\n                          style={labelstyle}\r\n                        >Item Type(TST):\r\n                        </label>\r\n                      </td>\r\n                      <td \r\n                        className={classes.cell2} \r\n                        style={{textAlign:\"left\", width:\"30%\"}}\r\n                      >\r\n                        <input\r\n                          style={textbxstyle}                        \r\n                          type=\"text\" \r\n                          id=\"itemType\" \r\n                          name=\"itemType\"\r\n                          value={this.state.itemType} \r\n                          onChange={this.handleItemTypeChange}\r\n                          onBlur={this.formValChange} \r\n                        />\r\n                        <span \r\n                          style={{color:\"red\"}}>\r\n                          {isError.itemType}\r\n                        </span>\r\n                      </td>\r\n                    </tr>               \r\n                    <tr>\r\n                      <td \r\n                        className={classes.cell1} \r\n                        style={{textAlign:\"right\"}}\r\n                      >\r\n                        <label \r\n                          htmlFor=\"testOrgId\" \r\n                          style={labelstyle}\r\n                        >Organization ID:\r\n                        </label>\r\n                      </td>\r\n                      <td \r\n                        className={classes.cell2} \r\n                        style={{textAlign:\"left\"}}\r\n                      >\r\n                        <input \r\n                          style={textbxstyle} \r\n                          // onBlur = {()=> this.ValidatorToI()} \r\n                          type=\"text\" \r\n                          id=\"testOrgId\" \r\n                          name=\"testOrgId\"\r\n                          value={this.state.testOrgId}\r\n                          onChange={this.handleTestOrgIdChange} \r\n                        />\r\n                        <span \r\n                          style={{color:\"red\"}}>\r\n                          {isError.itemType}\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                      <td \r\n                        className={classes.cell1} \r\n                        style={{textAlign:\"right\"}}\r\n                      >\r\n                        <label \r\n                          htmlFor=\"id\" \r\n                          style={labelstyle}\r\n                        >Test ID:\r\n                        </label>\r\n                      </td>\r\n                      <td \r\n                        className={classes.cell2} \r\n                        style={{textAlign:\"left\"}}\r\n                      >\r\n                        <input\r\n                          style={textbxstyle}  \r\n                          // onBlur = {()=> this.ValidatorTid()}\r\n                          type=\"text\" \r\n                          id=\"id\" \r\n                          name=\"id\"\r\n                          value={this.state.id} \r\n                          onChange={this.handleIdChange} \r\n                        />\r\n                        <span \r\n                          style={{color:\"red\"}}>\r\n                          {isError.itemType}\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n\r\n                    <tr >\r\n                      <td \r\n                        className={classes.cell1}  \r\n                        style={{textAlign:\"right\"}}\r\n                      >\r\n                        <label \r\n                          htmlFor=\"description\" \r\n                          style={labelstyle}\r\n                        >Description:\r\n                        </label>\r\n                      </td>\r\n                      <td \r\n                        className={classes.cell2} \r\n                        style={{textAlign:\"left\", width:\"30%\"}}\r\n                      >\r\n                        <input\r\n                          style={textbxstyle} \r\n                          type=\"text\" \r\n                          id=\"description\" \r\n                          name=\"description\"\r\n                          value={this.state.description} \r\n                          onChange={this.handleDescriptionChange} \r\n                        />\r\n                        <span \r\n                          style={{color:\"red\"}}>\r\n                          {isError.itemType}\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                      <td \r\n                        className={classes.cell1} \r\n                        style={{textAlign:\"right\"}}\r\n                      >\r\n                        <label \r\n                          htmlFor=\"tds\" \r\n                          style={labelstyle}\r\n                        >Test Delivery System:\r\n                        </label>\r\n                      </td>\r\n                      <td \r\n                        className={classes.cell2} \r\n                        style={{textAlign:\"left\"}}\r\n                      >\r\n                        <input\r\n                          style={textbxstyle} \r\n                          // onBlur = {()=> this.Validatortds()} \r\n                          type=\"text\" \r\n                          id=\"tds\" \r\n                          name=\"tds\"\r\n                          value={this.state.tds}\r\n                          onChange={this.handleTdsChange} \r\n                        />\r\n                        <span \r\n                          style={{color:\"red\"}}>\r\n                          {isError.itemType}\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table> \r\n              </div>\r\n              <div className={classes.flexChild}>\r\n                <table>\r\n                  <tbody>\r\n                    <tr>\r\n                      <td \r\n                        className={classes.cell8} \r\n                        style={{textAlign:\"center\", paddingLeft: \"2%\", paddingTop:\"2%\"}}\r\n                      >\r\n                        <input\r\n                          style={buttonstyle}\r\n                          type=\"submit\"\r\n                          value=\"Submit\"\r\n                        />\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </fieldset>\r\n          </form>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default withRouter(TestForm);\r\n\r\n// ValidatorItemType() {\r\n//   if (this.state.itemtype === \"\")\r\n//     {\r\n//       this.setState ({emptyErroritype: \"This field cannot be empty\"})\r\n//     }\r\n//     else \r\n//     {\r\n//       this.setState ({emptyErroritype: \"\"})\r\n//     }\r\n//   }\r\n//   ValidatorToI() {\r\n//     if (this.state.testorgid === \"\" )\r\n//     {\r\n//       this.setState ({emptyErrortestOid: \"This field cannot be empty\"})\r\n//     }\r\n//     else \r\n//     {\r\n//       this.setState ({emptyErrortestOid: \"\"})\r\n//     }\r\n//   }\r\n//   ValidatorTid() {\r\n//     if (this.state.testid === \"\")\r\n//     {\r\n//       this.setState ({emptyErrortestid: \"This field cannot be empty\"})\r\n//     }\r\n//     else \r\n//     {\r\n//       this.setState ({emptyErrortestid: \"\"})\r\n//     }\r\n//   }\r\n//   Validatortds() {\r\n//     if (this.state.tds === \"\" )\r\n//     {\r\n//       this.setState ({emptyErrortds: \"This field cannot be empty\"})\r\n//     }\r\n//     else \r\n//     {\r\n//       this.setState ({emptyErrortds: \"\"})\r\n//     }\r\n//   }\r\n\r\n//   SubmitValidator() {\r\n//       if (this.state.itemtype === \"\" || this.state.testorgid === \"\" || this.state.testid === \"\" || this.state.tds === \"\" ) {\r\n//         alert(\"A required field is missing\")\r\n//       }\r\n//   }"]},"metadata":{},"sourceType":"module"}