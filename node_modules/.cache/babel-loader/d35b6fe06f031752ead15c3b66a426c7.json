{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aljou\\\\Documents\\\\Bitbucket\\\\management-portal\\\\src\\\\components\\\\DataTables\\\\Orgs\\\\OrgTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, usePagination, useRowSelect } from 'react-table';\nimport Table from 'react-bootstrap/Table';\nimport axios from 'axios';\nimport { Link, withRouter, useHistory } from 'react-router-dom';\nimport { COLUMNS } from './columns';\nimport TableFilter from '../../UI/TableFilter/TableFilter';\nimport classes from './OrgTable.module.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretUp, faYenSign } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\nimport Checkbox from '../../UI/Checkbox/Checkbox';\nimport SmallButton from '../../UI/SmallButton/SmallButton';\nimport Spinner from '../../UI/Spinner/Spinner';\nimport Alert from '../../../components/UI/Alert/Alert';\n\nconst OrgTable = () => {\n  _s();\n\n  const [orgs, setOrgs] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const history = useHistory(); // this.render2 = this.render2.bind(this);\n  // this.ok = this.ok.bind(this);\n  // this.confirm = this.confirm.bind(this);\n  // this.yes = this.yes.bind(this);\n  // this.no = this.no.bind(this);\n  // get data from api\n\n  useEffect(() => {\n    axios.get('/orgs').then(res => {\n      console.log(res.data.result.Items);\n      const pathToData = res.data.result.Items;\n      const loadedData = []; //push data object into an array of kvps\n\n      for (const Item in pathToData) {\n        loadedData.push({\n          // org info\n          description: pathToData[Item].description,\n          id: pathToData[Item].id,\n          itemId: pathToData[Item].itemId,\n          itemType: pathToData[Item].itemType,\n          city: pathToData[Item].address[0].city,\n          // primary contact data\n          firstName: pathToData[Item].contact[0].firstName,\n          lastName: pathToData[Item].contact[0].lastName,\n          email: pathToData[Item].contact[0].email,\n          phone: pathToData[Item].contact[0].phone,\n          //full contact data\n          contact: pathToData[Item].contact,\n          // address\n          address: pathToData[Item].address,\n          // configuration params\n          configuration: pathToData[Item].configuration,\n          // timestamps\n          created: pathToData[Item].created,\n          updated: pathToData[Item].updated\n        });\n      } //console.log(loadedData);\n\n\n      setOrgs(loadedData);\n      setLoaded(true);\n    });\n  }, []); // memoize data to ensure it is not duplicated on each render\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => orgs, [orgs]); // create table instance\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    nextPage,\n    previousPage,\n    canNextPage,\n    canPreviousPage,\n    pageOptions,\n    prepareRow,\n    selectedFlatRows,\n    state,\n    setGlobalFilter\n  } = useTable({\n    columns: columns,\n    data: data\n  }, // add sorting, filtering, pagination and row select\n  useGlobalFilter, useSortBy, usePagination, useRowSelect, // add a column for checkbox to tables\n  hooks => {\n    hooks.visibleColumns.push(columns => {\n      return [{\n        id: 'selection',\n        Header: 'select',\n        Cell: ({\n          row\n        }) => /*#__PURE__*/_jsxDEV(Checkbox, { ...row.getToggleRowSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this)\n      }, ...columns];\n    });\n  }); // function confirm(dialog) {\n  //   let winW = window.innerWidth;\n  //   let winH = window.innerHeight;\n  //   let dialogoverlay = document.getElementById('dialogoverlay2');\n  //   let dialogbox = document.getElementById('dialogbox2');\n  //   dialogoverlay.style.display = \"block\";\n  //   dialogoverlay.style.height = winH+\"px\";\n  //   dialogbox.style.left = (winW/2) - (550 * .5) + \"px\";\n  //   dialogbox.style.top = \"100px\";\n  //   dialogbox.style.display = \"block\";\n  //   //document.getElementById('dialogboxhead').innerHTML = \"Acknowledge\";\n  //   document.getElementById('dialogboxbody2').innerHTML = dialog;\n  // }\n  // function yes() {\n  //   document.getElementById('dialogbox2').style.display = \"none\";\n  //   document.getElementById('dialogoverlay2').style.display = \"none\";\n  // }\n  // function no() {\n  //   document.getElementById('dialogbox2').style.display = \"none\";\n  //   document.getElementById('dialogoverlay2').style.display = \"none\";\n  // }\n  // destructure global filter and page index from state object\n\n  const {\n    globalFilter,\n    pageIndex\n  } = state; // data from selected row is stored here\n\n  let selectedRow = selectedFlatRows;\n  console.log(selectedRow); // handle edit button click\n\n  const HandleEditRequest = () => {\n    try {\n      // get properties to be passed to form and store in variable\n      const itemToEdit = selectedRow[0].original.id; // initialize query parameters array\n\n      const queryParams = []; // loop through itemToEdit, encode data, and push into queryParams as strings\n\n      queryParams.push(encodeURIComponent(\"id\") + '=' + encodeURIComponent(itemToEdit)); // join queryParams strings and store in variable\n\n      const queryString = queryParams.join('&'); // pass queryString data to EditTestForm via router\n\n      history.push({\n        pathname: '/edit-org',\n        search: '?' + queryString\n      });\n    } catch {\n      alert('please select an organization to edit');\n    }\n  };\n\n  const handleDeleteRequest = () => {\n    // let userConfirmation;\n    // userConfirmation = window.confirm('Are you sure you want to delete this test?');\n    // let userConfirm = document.getElementById(\"yes1\")\n    Alert(\"Are you sure you want to delete this test?\"); // check for user confirmation\n\n    if (userConfirmation) {\n      // get id of test to be deleted from selectedRow object\n      let itemToDelete = selectedRow[0].original.id; // make axios call, then reload page\n\n      axios.delete(`/orgs/${itemToDelete}`).then(response => {\n        window.location.reload();\n      }).catch(error => alert(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.tableWrap,\n      children: loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.toolBarWrap,\n          children: [/*#__PURE__*/_jsxDEV(TableFilter, {\n            filter: globalFilter,\n            setFilter: setGlobalFilter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: '/add-org'\n            },\n            children: /*#__PURE__*/_jsxDEV(SmallButton, {\n              children: \"Add New\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.dialogoverlay,\n          id: \"dialogoverlay2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.dialogbox,\n          id: \"dialogbox2\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.dialoghead,\n              id: \"dialogboxhead2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.dialogbody,\n              id: \"dialogboxbody2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.dialogfoot,\n              id: \"dialogboxfoot2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n          striped: true,\n          bordered: true,\n          hover: true,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n              children: headerGroup.headers.map(column =>\n              /*#__PURE__*/\n              // render headers w/ sort functionality\n              _jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n                children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: column.isSorted ? column.isSortedDesc ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                    icon: faCaretUp\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 233,\n                    columnNumber: 65\n                  }, this) : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                    icon: faCaretDown\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 233,\n                    columnNumber: 104\n                  }, this) : ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n            children: page.map(row => {\n              prepareRow(row);\n              return (\n                /*#__PURE__*/\n                // render table rows\n                _jsxDEV(\"tr\", { ...row.getRowProps(),\n                  children: row.cells.map(cell => {\n                    return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                      children: cell.render('Cell')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 247,\n                      columnNumber: 26\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 15\n                }, this)\n              );\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: classes.pageButton,\n            onClick: () => previousPage(),\n            disabled: !canPreviousPage,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.pageNum,\n            children: [\"Page\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [pageIndex + 1, \" of \", pageOptions.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: classes.pageButton,\n            onClick: () => nextPage(),\n            disabled: !canNextPage,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(SmallButton, {\n          clicked: HandleEditRequest,\n          children: \"\\xA0\\xA0Edit\\xA0\\xA0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(SmallButton, {\n          clicked: handleDeleteRequest,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.spinnerWrap,\n        children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(OrgTable, \"raJw+VKwbx5ts0BEN8014Dyt61E=\", false, function () {\n  return [useHistory, useTable];\n});\n\n_c = OrgTable;\nexport default _c2 = withRouter(OrgTable);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"OrgTable\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/aljou/Documents/Bitbucket/management-portal/src/components/DataTables/Orgs/OrgTable.js"],"names":["React","useMemo","useState","useEffect","useTable","useSortBy","useGlobalFilter","usePagination","useRowSelect","Table","axios","Link","withRouter","useHistory","COLUMNS","TableFilter","classes","FontAwesomeIcon","faCaretUp","faYenSign","faCaretDown","Checkbox","SmallButton","Spinner","Alert","OrgTable","orgs","setOrgs","loaded","setLoaded","history","get","then","res","console","log","data","result","Items","pathToData","loadedData","Item","push","description","id","itemId","itemType","city","address","firstName","contact","lastName","email","phone","configuration","created","updated","columns","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","prepareRow","selectedFlatRows","state","setGlobalFilter","hooks","visibleColumns","Header","Cell","row","getToggleRowSelectedProps","globalFilter","pageIndex","selectedRow","HandleEditRequest","itemToEdit","original","queryParams","encodeURIComponent","queryString","join","pathname","search","alert","handleDeleteRequest","userConfirmation","itemToDelete","delete","response","window","location","reload","catch","error","tableWrap","toolBarWrap","dialogoverlay","dialogbox","dialoghead","dialogbody","dialogfoot","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","cell","getCellProps","pageButton","pageNum","length","spinnerWrap"],"mappings":"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","sourcesContent":["import React, {useMemo, useState, useEffect} from 'react';\r\nimport {\r\n  useTable, \r\n  useSortBy, \r\n  useGlobalFilter, \r\n  usePagination,\r\n  useRowSelect\r\n} from 'react-table';\r\nimport Table from 'react-bootstrap/Table';\r\nimport axios from 'axios';\r\nimport {Link, withRouter, useHistory} from 'react-router-dom';\r\n\r\nimport {COLUMNS} from './columns';\r\n\r\nimport TableFilter from '../../UI/TableFilter/TableFilter';\r\n\r\nimport classes from './OrgTable.module.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faCaretUp, faYenSign} from '@fortawesome/free-solid-svg-icons';\r\nimport {faCaretDown} from '@fortawesome/free-solid-svg-icons';\r\nimport Checkbox from '../../UI/Checkbox/Checkbox';\r\nimport SmallButton from '../../UI/SmallButton/SmallButton';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\nimport Alert from '../../../components/UI/Alert/Alert';\r\n\r\n\r\nconst OrgTable = () => {\r\n  const [orgs, setOrgs] = useState([])\r\n  const [loaded, setLoaded] = useState(false);\r\n  const history = useHistory();\r\n\r\n  // this.render2 = this.render2.bind(this);\r\n  // this.ok = this.ok.bind(this);\r\n  // this.confirm = this.confirm.bind(this);\r\n  // this.yes = this.yes.bind(this);\r\n  // this.no = this.no.bind(this);\r\n\r\n\r\n  // get data from api\r\n  useEffect(() => {\r\n    axios.get('/orgs').then(res => {\r\n      console.log(res.data.result.Items);\r\n      const pathToData = res.data.result.Items\r\n      const loadedData = [];\r\n      \r\n      //push data object into an array of kvps\r\n      for (const Item in pathToData) {\r\n        loadedData.push({\r\n          // org info\r\n          description: pathToData[Item].description,\r\n          id: pathToData[Item].id,\r\n          itemId: pathToData[Item].itemId,\r\n          itemType: pathToData[Item].itemType,\r\n          city: pathToData[Item].address[0].city,\r\n          // primary contact data\r\n          firstName: pathToData[Item].contact[0].firstName,\r\n          lastName: pathToData[Item].contact[0].lastName,\r\n          email: pathToData[Item].contact[0].email,\r\n          phone: pathToData[Item].contact[0].phone,\r\n          //full contact data\r\n          contact: pathToData[Item].contact,\r\n          // address\r\n          address: pathToData[Item].address,\r\n          // configuration params\r\n          configuration: pathToData[Item].configuration,\r\n          // timestamps\r\n          created: pathToData[Item].created,\r\n          updated: pathToData[Item].updated\r\n        });\r\n      }\r\n      //console.log(loadedData);\r\n      setOrgs(loadedData);\r\n      setLoaded(true);\r\n    });\r\n  \r\n  }, []);\r\n\r\n  // memoize data to ensure it is not duplicated on each render\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => orgs, [orgs]);\r\n\r\n  // create table instance\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    canNextPage,\r\n    canPreviousPage,\r\n    pageOptions,\r\n    prepareRow,\r\n    selectedFlatRows,\r\n    state,\r\n    setGlobalFilter,\r\n  } = useTable(\r\n    {\r\n      columns: columns,\r\n      data: data\r\n    },\r\n    // add sorting, filtering, pagination and row select\r\n    useGlobalFilter,  useSortBy, usePagination, useRowSelect,\r\n    // add a column for checkbox to tables\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => {\r\n        return [\r\n          {\r\n            id: 'selection',\r\n            Header: 'select',\r\n            Cell: ({row}) => (\r\n              <Checkbox {...row.getToggleRowSelectedProps()} />\r\n            )\r\n          },\r\n          ...columns\r\n        ]\r\n      });\r\n    }\r\n  );\r\n\r\n  // function confirm(dialog) {\r\n  //   let winW = window.innerWidth;\r\n  //   let winH = window.innerHeight;\r\n  //   let dialogoverlay = document.getElementById('dialogoverlay2');\r\n  //   let dialogbox = document.getElementById('dialogbox2');\r\n  //   dialogoverlay.style.display = \"block\";\r\n  //   dialogoverlay.style.height = winH+\"px\";\r\n  //   dialogbox.style.left = (winW/2) - (550 * .5) + \"px\";\r\n  //   dialogbox.style.top = \"100px\";\r\n  //   dialogbox.style.display = \"block\";\r\n  //   //document.getElementById('dialogboxhead').innerHTML = \"Acknowledge\";\r\n  //   document.getElementById('dialogboxbody2').innerHTML = dialog;\r\n  // }\r\n  \r\n  // function yes() {\r\n  //   document.getElementById('dialogbox2').style.display = \"none\";\r\n  //   document.getElementById('dialogoverlay2').style.display = \"none\";\r\n  // }\r\n  \r\n  // function no() {\r\n  //   document.getElementById('dialogbox2').style.display = \"none\";\r\n  //   document.getElementById('dialogoverlay2').style.display = \"none\";\r\n  // }\r\n\r\n  // destructure global filter and page index from state object\r\n  const {globalFilter, pageIndex} =  state;\r\n\r\n  // data from selected row is stored here\r\n  let selectedRow = selectedFlatRows\r\n  console.log(selectedRow);\r\n\r\n  // handle edit button click\r\n  const HandleEditRequest = () => {\r\n    try {\r\n      // get properties to be passed to form and store in variable\r\n      const itemToEdit = selectedRow[0].original.id\r\n      // initialize query parameters array\r\n      const queryParams = [];\r\n\r\n      // loop through itemToEdit, encode data, and push into queryParams as strings\r\n        queryParams.push(encodeURIComponent(\"id\") + '=' + encodeURIComponent(itemToEdit));\r\n      // join queryParams strings and store in variable\r\n      const queryString = queryParams.join('&');\r\n\r\n      // pass queryString data to EditTestForm via router\r\n      history.push({\r\n        pathname: '/edit-org',\r\n        search: '?' + queryString\r\n      });\r\n    } catch {\r\n      alert('please select an organization to edit')\r\n    }\r\n  }\r\n\r\n  const handleDeleteRequest = () => {\r\n\r\n    // let userConfirmation;\r\n    // userConfirmation = window.confirm('Are you sure you want to delete this test?');\r\n\r\n    // let userConfirm = document.getElementById(\"yes1\")\r\n\r\n    Alert(\"Are you sure you want to delete this test?\")\r\n\r\n    // check for user confirmation\r\n    if (userConfirmation) {\r\n      // get id of test to be deleted from selectedRow object\r\n      let itemToDelete = selectedRow[0].original.id\r\n      \r\n      // make axios call, then reload page\r\n      axios.delete(`/orgs/${itemToDelete}`)\r\n          .then(response => {\r\n            window.location.reload();\r\n          })\r\n          .catch(error => alert(error));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <div className={classes.tableWrap}>\r\n      {/* if data is loaded, render table and associated components. if not, render loading spinner */}\r\n      {loaded ? \r\n        <div>\r\n      {/* render filter field, with globalFilter and setGlobalFilter passed as props */}\r\n      <div className={classes.toolBarWrap}>\r\n        {/* render filter field, with globalFilter and setGlobalFilter passed as props */}\r\n        <TableFilter filter={globalFilter} setFilter={setGlobalFilter} />\r\n        <Link to={{pathname: '/add-org'}}><SmallButton>Add New</SmallButton></Link>\r\n      </div>\r\n\r\n      <div className={classes.dialogoverlay} id =\"dialogoverlay2\"></div>\r\n      <div className= {classes.dialogbox} id=\"dialogbox2\">\r\n      <div>\r\n          <div className={classes.dialoghead} id=\"dialogboxhead2\"></div>\r\n          <div className={classes.dialogbody} id=\"dialogboxbody2\"></div>\r\n          <div className={classes.dialogfoot} id=\"dialogboxfoot2\">\r\n          {/* <button id=\"yes1\"className={classes.alertbutton} onClick={yes()}>OK</button>\r\n          <button id=\"no1\" className={classes.alertbutton} onClick={no()}>Cancel</button> */}\r\n          </div>\r\n      </div>\r\n      </div>\r\n\r\n      {/* render table */}\r\n      <Table {...getTableProps()} striped bordered hover>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  // render headers w/ sort functionality\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>  \r\n                    {column.render('Header')}\r\n                    <span>\r\n                      {column.isSorted ? (column.isSortedDesc ? <FontAwesomeIcon icon={faCaretUp} /> : <FontAwesomeIcon icon={faCaretDown} />) : ''}\r\n                    </span>\r\n                  </th>\r\n                ))} \r\n              </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map(row => {\r\n            prepareRow(row)\r\n            return (\r\n              // render table rows\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n      <div>\r\n        {/* render pagination buttons */}\r\n        <button\r\n          className={classes.pageButton} \r\n          onClick={() => previousPage()}\r\n          disabled={!canPreviousPage}\r\n        >Previous</button>\r\n        <span className={classes.pageNum}>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>\r\n        </span>\r\n        <button\r\n          className={classes.pageButton} \r\n          onClick={() => nextPage()}\r\n          disabled={!canNextPage}\r\n        >Next</button>\r\n      </div>\r\n      <br/>\r\n      <SmallButton clicked={HandleEditRequest}>&nbsp;&nbsp;Edit&nbsp;&nbsp;</SmallButton>\r\n      <SmallButton clicked={handleDeleteRequest}>Delete</SmallButton>\r\n      </div>\r\n      : \r\n        <div className={classes.spinnerWrap}>\r\n          <Spinner />\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n    </>   \r\n  );\r\n}\r\nexport default withRouter(OrgTable);"]},"metadata":{},"sourceType":"module"}