{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aljou\\\\Documents\\\\Bitbucket\\\\management-portal\\\\src\\\\components\\\\DataTables\\\\Sessions\\\\SessionTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { useTable, useSortBy, useGlobalFilter, usePagination, useRowSelect } from 'react-table';\nimport Table from 'react-bootstrap/Table';\nimport axios from '../../../axios';\nimport { withRouter, useHistory } from 'react-router-dom';\nimport { COLUMNS } from './columns';\nimport TableFilter from '../../UI/TableFilter/TableFilter';\nimport classes from './SessionTable.module.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\nimport Checkbox from '../../UI/Checkbox/Checkbox';\nimport SmallButton from '../../UI/SmallButton/SmallButton';\n\nconst SessionTable = () => {\n  _s();\n\n  const [sessions, setSessions] = useState([]);\n  const history = useHistory(); // get data from api\n\n  useEffect(() => {\n    axios.get('/sessions').then(res => {\n      //console.log(res.data.result.Items);\n      const pathToData = res.data.result.Items;\n      const loadedData = []; // push data objects into an array\n\n      for (const Item in pathToData) {\n        loadedData.push({\n          itemId: pathToData[Item].itemId,\n          itemType: pathToData[Item].itemType,\n          // time data\n          created: pathToData[Item].created,\n          updated: pathToData[Item].updated,\n          startTime: pathToData[Item].startTime,\n          endTime: pathToData[Item].endTime,\n          // session ids and process state\n          sessionOrgId: pathToData[Item].sessionOrgId,\n          sessionTestId: pathToData[Item].sessionTestId,\n          sessionUserId: pathToData[Item].sessionUserId,\n          processState: pathToData[Item].processState,\n          // examinee data\n          id: pathToData[Item].examinee.id,\n          email: pathToData[Item].examinee.email,\n          firstName: pathToData[Item].examinee.firstName,\n          lastName: pathToData[Item].examinee.lastName,\n          // test data\n          description: pathToData[Item].test.description,\n          testId: pathToData[Item].test.id,\n          // analytics\n          analytics: pathToData[Item].analytics,\n          // geolocation\n          geoLocation: pathToData[Item].geoLocation,\n          // openTok\n          openTok: pathToData[Item].openTok,\n          // userAgent\n          userAgent: pathToData[Item].userAgent,\n          // images\n          images: pathToData[Item].images,\n          // videos\n          videos: pathToData[Item].videos\n        });\n      } //console.log(loadedData);\n\n\n      setSessions(loadedData);\n    });\n  }, []); // memoize data to ensure it is not duplicated on each render\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => sessions, [sessions]); // create table instance\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    nextPage,\n    previousPage,\n    canNextPage,\n    canPreviousPage,\n    pageOptions,\n    prepareRow,\n    selectedFlatRows,\n    state,\n    setGlobalFilter\n  } = useTable({\n    columns: columns,\n    data: data\n  }, // add sorting, filtering, pagination and row select\n  useGlobalFilter, useSortBy, usePagination, useRowSelect, // add a column for checkbox to tables\n  hooks => {\n    hooks.visibleColumns.push(columns => {\n      return [{\n        id: 'selection',\n        Header: 'select',\n        Cell: ({\n          row\n        }) => /*#__PURE__*/_jsxDEV(Checkbox, { ...row.getToggleRowSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this)\n      }, ...columns];\n    });\n  }); // destructure global filter and page index from state object\n\n  const {\n    globalFilter,\n    pageIndex\n  } = state; // data from selected row is stored here\n\n  let selectedRow = selectedFlatRows;\n  console.log(selectedRow);\n\n  const handleViewDetailsRequest = () => {\n    // get sessionId of selected row and store in variable\n    const sessionToDisplay = selectedRow[0].original.itemId; // initialize query parameters array\n\n    const queryParams = []; // encode sessionId and push into queryParams as strings\n\n    queryParams.push(encodeURIComponent('itemId') + '=' + encodeURIComponent(sessionToDisplay)); // join queryParams strings and store in variable\n\n    const queryString = queryParams.join('&'); // pass queryString data to ViewSession container via router\n\n    history.push({\n      pathname: '/view-selected-session',\n      search: '?' + queryString\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.toolBarWrap,\n      children: /*#__PURE__*/_jsxDEV(TableFilter, {\n        filter: globalFilter,\n        setFilter: setGlobalFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column =>\n          /*#__PURE__*/\n          // render headers w/ sort functionality\n          _jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n            children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: column.isSorted ? column.isSortedDesc ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faCaretUp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 65\n              }, this) : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faCaretDown\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 104\n              }, this) : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: page.map(row => {\n          prepareRow(row);\n          return (\n            /*#__PURE__*/\n            // render table rows\n            _jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  children: cell.render('Cell')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 26\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 15\n            }, this)\n          );\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.pageButton,\n        onClick: () => previousPage(),\n        disabled: !canPreviousPage,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: classes.pageNum,\n        children: [\"Page\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [pageIndex + 1, \" of \", pageOptions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.pageButton,\n        onClick: () => nextPage(),\n        disabled: !canNextPage,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SmallButton, {\n      clicked: handleViewDetailsRequest,\n      children: \"View Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SessionTable, \"JyBDBXawKQC8tY90gdpBMvTktbI=\", false, function () {\n  return [useHistory, useTable];\n});\n\n_c = SessionTable;\nexport default _c2 = withRouter(SessionTable);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SessionTable\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/aljou/Documents/Bitbucket/management-portal/src/components/DataTables/Sessions/SessionTable.js"],"names":["React","useMemo","useState","useEffect","useTable","useSortBy","useGlobalFilter","usePagination","useRowSelect","Table","axios","withRouter","useHistory","COLUMNS","TableFilter","classes","FontAwesomeIcon","faCaretUp","faCaretDown","Checkbox","SmallButton","SessionTable","sessions","setSessions","history","get","then","res","pathToData","data","result","Items","loadedData","Item","push","itemId","itemType","created","updated","startTime","endTime","sessionOrgId","sessionTestId","sessionUserId","processState","id","examinee","email","firstName","lastName","description","test","testId","analytics","geoLocation","openTok","userAgent","images","videos","columns","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","prepareRow","selectedFlatRows","state","setGlobalFilter","hooks","visibleColumns","Header","Cell","row","getToggleRowSelectedProps","globalFilter","pageIndex","selectedRow","console","log","handleViewDetailsRequest","sessionToDisplay","original","queryParams","encodeURIComponent","queryString","join","pathname","search","toolBarWrap","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","getRowProps","cells","cell","getCellProps","pageButton","pageNum","length"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,OAAf,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAkD,OAAlD;AACA,SACEC,QADF,EAEEC,SAFF,EAGEC,eAHF,EAIEC,aAJF,EAKEC,YALF,QAMO,aANP;AAOA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAAQC,UAAR,EAAoBC,UAApB,QAAqC,kBAArC;AAEA,SAAQC,OAAR,QAAsB,WAAtB;AAEA,OAAOC,WAAP,MAAwB,kCAAxB;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAAQC,SAAR,QAAwB,mCAAxB;AACA,SAAQC,WAAR,QAA0B,mCAA1B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMsB,OAAO,GAAGZ,UAAU,EAA1B,CAFyB,CAIzB;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,KAAK,CAACe,GAAN,CAAU,WAAV,EAAuBC,IAAvB,CAA4BC,GAAG,IAAI;AACjC;AACA,YAAMC,UAAU,GAAGD,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgBC,KAAnC;AACA,YAAMC,UAAU,GAAG,EAAnB,CAHiC,CAKjC;;AACA,WAAK,MAAMC,IAAX,IAAmBL,UAAnB,EAA+B;AAC7BI,QAAAA,UAAU,CAACE,IAAX,CAAgB;AACdC,UAAAA,MAAM,EAAEP,UAAU,CAACK,IAAD,CAAV,CAAiBE,MADX;AAEdC,UAAAA,QAAQ,EAAER,UAAU,CAACK,IAAD,CAAV,CAAiBG,QAFb;AAGd;AACAC,UAAAA,OAAO,EAAET,UAAU,CAACK,IAAD,CAAV,CAAiBI,OAJZ;AAKdC,UAAAA,OAAO,EAAEV,UAAU,CAACK,IAAD,CAAV,CAAiBK,OALZ;AAMdC,UAAAA,SAAS,EAAEX,UAAU,CAACK,IAAD,CAAV,CAAiBM,SANd;AAOdC,UAAAA,OAAO,EAAEZ,UAAU,CAACK,IAAD,CAAV,CAAiBO,OAPZ;AAQd;AACAC,UAAAA,YAAY,EAAEb,UAAU,CAACK,IAAD,CAAV,CAAiBQ,YATjB;AAUdC,UAAAA,aAAa,EAAEd,UAAU,CAACK,IAAD,CAAV,CAAiBS,aAVlB;AAWdC,UAAAA,aAAa,EAAEf,UAAU,CAACK,IAAD,CAAV,CAAiBU,aAXlB;AAYdC,UAAAA,YAAY,EAAEhB,UAAU,CAACK,IAAD,CAAV,CAAiBW,YAZjB;AAad;AACAC,UAAAA,EAAE,EAAEjB,UAAU,CAACK,IAAD,CAAV,CAAiBa,QAAjB,CAA0BD,EAdhB;AAedE,UAAAA,KAAK,EAAEnB,UAAU,CAACK,IAAD,CAAV,CAAiBa,QAAjB,CAA0BC,KAfnB;AAgBdC,UAAAA,SAAS,EAAEpB,UAAU,CAACK,IAAD,CAAV,CAAiBa,QAAjB,CAA0BE,SAhBvB;AAiBdC,UAAAA,QAAQ,EAAErB,UAAU,CAACK,IAAD,CAAV,CAAiBa,QAAjB,CAA0BG,QAjBtB;AAkBd;AACAC,UAAAA,WAAW,EAAEtB,UAAU,CAACK,IAAD,CAAV,CAAiBkB,IAAjB,CAAsBD,WAnBrB;AAoBdE,UAAAA,MAAM,EAAExB,UAAU,CAACK,IAAD,CAAV,CAAiBkB,IAAjB,CAAsBN,EApBhB;AAqBd;AACAQ,UAAAA,SAAS,EAAEzB,UAAU,CAACK,IAAD,CAAV,CAAiBoB,SAtBd;AAuBd;AACAC,UAAAA,WAAW,EAAE1B,UAAU,CAACK,IAAD,CAAV,CAAiBqB,WAxBhB;AAyBd;AACAC,UAAAA,OAAO,EAAE3B,UAAU,CAACK,IAAD,CAAV,CAAiBsB,OA1BZ;AA2Bd;AACAC,UAAAA,SAAS,EAAE5B,UAAU,CAACK,IAAD,CAAV,CAAiBuB,SA5Bd;AA6Bd;AACAC,UAAAA,MAAM,EAAE7B,UAAU,CAACK,IAAD,CAAV,CAAiBwB,MA9BX;AA+Bd;AACAC,UAAAA,MAAM,EAAE9B,UAAU,CAACK,IAAD,CAAV,CAAiByB;AAhCX,SAAhB;AAkCD,OAzCgC,CA0CjC;;;AACAnC,MAAAA,WAAW,CAACS,UAAD,CAAX;AACD,KA5CD;AA6CD,GA9CQ,EA8CN,EA9CM,CAAT,CALyB,CAqDzB;;AACA,QAAM2B,OAAO,GAAG1D,OAAO,CAAC,MAAMY,OAAP,EAAgB,EAAhB,CAAvB;AACA,QAAMgB,IAAI,GAAG5B,OAAO,CAAC,MAAMqB,QAAP,EAAiB,CAACA,QAAD,CAAjB,CAApB,CAvDyB,CAyDzB;;AACA,QAAM;AACJsC,IAAAA,aADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,YANI;AAOJC,IAAAA,WAPI;AAQJC,IAAAA,eARI;AASJC,IAAAA,WATI;AAUJC,IAAAA,UAVI;AAWJC,IAAAA,gBAXI;AAYJC,IAAAA,KAZI;AAaJC,IAAAA;AAbI,MAcFpE,QAAQ,CACV;AACEuD,IAAAA,OAAO,EAAEA,OADX;AAEE9B,IAAAA,IAAI,EAAEA;AAFR,GADU,EAKV;AACAvB,EAAAA,eANU,EAMQD,SANR,EAMmBE,aANnB,EAMkCC,YANlC,EAOV;AACCiE,EAAAA,KAAD,IAAW;AACTA,IAAAA,KAAK,CAACC,cAAN,CAAqBxC,IAArB,CAA2ByB,OAAD,IAAa;AACrC,aAAO,CACL;AACEd,QAAAA,EAAE,EAAE,WADN;AAEE8B,QAAAA,MAAM,EAAE,QAFV;AAGEC,QAAAA,IAAI,EAAE,CAAC;AAACC,UAAAA;AAAD,SAAD,kBACJ,QAAC,QAAD,OAAcA,GAAG,CAACC,yBAAJ;AAAd;AAAA;AAAA;AAAA;AAAA;AAJJ,OADK,EAQL,GAAGnB,OARE,CAAP;AAUD,KAXD;AAYD,GArBS,CAdZ,CA1DyB,CAgGzB;;AACA,QAAM;AAACoB,IAAAA,YAAD;AAAeC,IAAAA;AAAf,MAA6BT,KAAnC,CAjGyB,CAmGzB;;AACA,MAAIU,WAAW,GAAGX,gBAAlB;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;;AAEA,QAAMG,wBAAwB,GAAG,MAAM;AACrC;AACA,UAAMC,gBAAgB,GAAGJ,WAAW,CAAC,CAAD,CAAX,CAAeK,QAAf,CAAwBnD,MAAjD,CAFqC,CAIrC;;AACA,UAAMoD,WAAW,GAAG,EAApB,CALqC,CAOrC;;AACAA,IAAAA,WAAW,CAACrD,IAAZ,CAAiBsD,kBAAkB,CAAC,QAAD,CAAlB,GAA+B,GAA/B,GAAqCA,kBAAkB,CAACH,gBAAD,CAAxE,EARqC,CAUrC;;AACA,UAAMI,WAAW,GAAGF,WAAW,CAACG,IAAZ,CAAiB,GAAjB,CAApB,CAXqC,CAarC;;AACAlE,IAAAA,OAAO,CAACU,IAAR,CAAa;AACXyD,MAAAA,QAAQ,EAAE,wBADC;AAEXC,MAAAA,MAAM,EAAE,MAAMH;AAFH,KAAb;AAID,GAlBD;;AAoBA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAE1E,OAAO,CAAC8E,WAAxB;AAAA,6BAEE,QAAC,WAAD;AAAa,QAAA,MAAM,EAAEd,YAArB;AAAmC,QAAA,SAAS,EAAEP;AAA9C;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,KAAD,OAAWZ,aAAa,EAAxB;AAA4B,MAAA,OAAO,MAAnC;AAAoC,MAAA,QAAQ,MAA5C;AAA6C,MAAA,KAAK,MAAlD;AAAA,8BACE;AAAA,kBACGE,YAAY,CAACgC,GAAb,CAAkBC,WAAD,iBACd,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,oBACGD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAyBI,MAAD;AAAA;AACvB;AACA,6BAAQA,MAAM,CAACC,cAAP,CAAsBD,MAAM,CAACE,oBAAP,EAAtB,CAAR;AAAA,uBACGF,MAAM,CAACG,MAAP,CAAc,QAAd,CADH,eAEE;AAAA,wBACGH,MAAM,CAACI,QAAP,GAAmBJ,MAAM,CAACK,YAAP,gBAAsB,QAAC,eAAD;AAAiB,gBAAA,IAAI,EAAEtF;AAAvB;AAAA;AAAA;AAAA;AAAA,sBAAtB,gBAA6D,QAAC,eAAD;AAAiB,gBAAA,IAAI,EAAEC;AAAvB;AAAA;AAAA;AAAA;AAAA,sBAAhF,GAA0H;AAD7H;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFD;AADH;AAAA;AAAA;AAAA;AAAA,gBADH;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAgBE,sBAAW2C,iBAAiB,EAA5B;AAAA,kBACGE,IAAI,CAAC+B,GAAL,CAASjB,GAAG,IAAI;AACfR,UAAAA,UAAU,CAACQ,GAAD,CAAV;AACA;AAAA;AACE;AACA,+BAAQA,GAAG,CAAC2B,WAAJ,EAAR;AAAA,wBACG3B,GAAG,CAAC4B,KAAJ,CAAUX,GAAV,CAAeY,IAAD,IAAU;AACvB,oCAAO,mBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,4BAA8BD,IAAI,CAACL,MAAL,CAAY,MAAZ;AAA9B;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD,eAFA;AADH;AAAA;AAAA;AAAA;AAAA;AAFF;AAQD,SAVA;AADH;AAAA;AAAA;AAAA;AAAA,cAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAqCE;AAAA,8BAEE;AACE,QAAA,SAAS,EAAEtF,OAAO,CAAC6F,UADrB;AAEE,QAAA,OAAO,EAAE,MAAM3C,YAAY,EAF7B;AAGE,QAAA,QAAQ,EAAE,CAACE,eAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE;AAAM,QAAA,SAAS,EAAEpD,OAAO,CAAC8F,OAAzB;AAAA,2BACO,GADP,eAEE;AAAA,qBACG7B,SAAS,GAAG,CADf,UACsBZ,WAAW,CAAC0C,MADlC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAaE;AACE,QAAA,SAAS,EAAE/F,OAAO,CAAC6F,UADrB;AAEE,QAAA,OAAO,EAAE,MAAM5C,QAAQ,EAFzB;AAGE,QAAA,QAAQ,EAAE,CAACE,WAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YArCF,eAwDE;AAAA;AAAA;AAAA;AAAA,YAxDF,eAyDE,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEkB,wBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzDF;AAAA,kBADF;AA6DD,CAxLD;;GAAM/D,Y;UAEYT,U,EAsEZR,Q;;;KAxEAiB,Y;AAyLN,qBAAeV,UAAU,CAACU,YAAD,CAAzB","sourcesContent":["import React, {useMemo, useState, useEffect} from 'react';\r\nimport {\r\n  useTable, \r\n  useSortBy, \r\n  useGlobalFilter, \r\n  usePagination,\r\n  useRowSelect\r\n} from 'react-table';\r\nimport Table from 'react-bootstrap/Table';\r\nimport axios from '../../../axios';\r\nimport {withRouter, useHistory} from 'react-router-dom';\r\n\r\nimport {COLUMNS} from './columns';\r\n\r\nimport TableFilter from '../../UI/TableFilter/TableFilter';\r\n\r\nimport classes from './SessionTable.module.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faCaretUp} from '@fortawesome/free-solid-svg-icons';\r\nimport {faCaretDown} from '@fortawesome/free-solid-svg-icons';\r\nimport Checkbox from '../../UI/Checkbox/Checkbox';\r\nimport SmallButton from '../../UI/SmallButton/SmallButton';\r\n\r\nconst SessionTable = () => {\r\n  const [sessions, setSessions] = useState([])\r\n  const history = useHistory();\r\n\r\n  // get data from api\r\n  useEffect(() => {\r\n    axios.get('/sessions').then(res => {\r\n      //console.log(res.data.result.Items);\r\n      const pathToData = res.data.result.Items\r\n      const loadedData = [];\r\n\r\n      // push data objects into an array\r\n      for (const Item in pathToData) {\r\n        loadedData.push({\r\n          itemId: pathToData[Item].itemId,\r\n          itemType: pathToData[Item].itemType,\r\n          // time data\r\n          created: pathToData[Item].created,\r\n          updated: pathToData[Item].updated,\r\n          startTime: pathToData[Item].startTime,\r\n          endTime: pathToData[Item].endTime,\r\n          // session ids and process state\r\n          sessionOrgId: pathToData[Item].sessionOrgId,\r\n          sessionTestId: pathToData[Item].sessionTestId,\r\n          sessionUserId: pathToData[Item].sessionUserId,\r\n          processState: pathToData[Item].processState,\r\n          // examinee data\r\n          id: pathToData[Item].examinee.id,\r\n          email: pathToData[Item].examinee.email,\r\n          firstName: pathToData[Item].examinee.firstName,\r\n          lastName: pathToData[Item].examinee.lastName,\r\n          // test data\r\n          description: pathToData[Item].test.description,\r\n          testId: pathToData[Item].test.id,\r\n          // analytics\r\n          analytics: pathToData[Item].analytics,\r\n          // geolocation\r\n          geoLocation: pathToData[Item].geoLocation,\r\n          // openTok\r\n          openTok: pathToData[Item].openTok,\r\n          // userAgent\r\n          userAgent: pathToData[Item].userAgent,\r\n          // images\r\n          images: pathToData[Item].images,\r\n          // videos\r\n          videos: pathToData[Item].videos\r\n        });\r\n      }\r\n      //console.log(loadedData);\r\n      setSessions(loadedData);\r\n    });\r\n  }, []);\r\n\r\n  // memoize data to ensure it is not duplicated on each render\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => sessions, [sessions]);\r\n\r\n  // create table instance\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    canNextPage,\r\n    canPreviousPage,\r\n    pageOptions,\r\n    prepareRow,\r\n    selectedFlatRows,\r\n    state,\r\n    setGlobalFilter,\r\n  } = useTable(\r\n    {\r\n      columns: columns,\r\n      data: data\r\n    },\r\n    // add sorting, filtering, pagination and row select\r\n    useGlobalFilter,  useSortBy, usePagination, useRowSelect,\r\n    // add a column for checkbox to tables\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => {\r\n        return [\r\n          {\r\n            id: 'selection',\r\n            Header: 'select',\r\n            Cell: ({row}) => (\r\n              <Checkbox {...row.getToggleRowSelectedProps()} />\r\n            )\r\n          },\r\n          ...columns\r\n        ]\r\n      });\r\n    }\r\n  );\r\n\r\n  // destructure global filter and page index from state object\r\n  const {globalFilter, pageIndex} =  state;\r\n\r\n  // data from selected row is stored here\r\n  let selectedRow = selectedFlatRows\r\n  console.log(selectedRow);\r\n\r\n  const handleViewDetailsRequest = () => {\r\n    // get sessionId of selected row and store in variable\r\n    const sessionToDisplay = selectedRow[0].original.itemId;\r\n\r\n    // initialize query parameters array\r\n    const queryParams = [];\r\n\r\n    // encode sessionId and push into queryParams as strings\r\n    queryParams.push(encodeURIComponent('itemId') + '=' + encodeURIComponent(sessionToDisplay));\r\n\r\n    // join queryParams strings and store in variable\r\n    const queryString = queryParams.join('&');\r\n    \r\n    // pass queryString data to ViewSession container via router\r\n    history.push({\r\n      pathname: '/view-selected-session',\r\n      search: '?' + queryString\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.toolBarWrap}>\r\n        {/* render filter field, with globalFilter and setGlobalFilter passed as props */}\r\n        <TableFilter filter={globalFilter} setFilter={setGlobalFilter} />\r\n      </div>\r\n\r\n      {/* render table */}\r\n      <Table {...getTableProps()} striped bordered hover>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  // render headers w/ sort functionality\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>  \r\n                    {column.render('Header')}\r\n                    <span>\r\n                      {column.isSorted ? (column.isSortedDesc ? <FontAwesomeIcon icon={faCaretUp} /> : <FontAwesomeIcon icon={faCaretDown} />) : ''}\r\n                    </span>\r\n                  </th>\r\n                ))} \r\n              </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map(row => {\r\n            prepareRow(row)\r\n            return (\r\n              // render table rows\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </Table>\r\n      <div>\r\n        {/* render pagination buttons */}\r\n        <button\r\n          className={classes.pageButton} \r\n          onClick={() => previousPage()}\r\n          disabled={!canPreviousPage}\r\n        >Previous</button>\r\n        <span className={classes.pageNum}>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>\r\n        </span>\r\n        <button\r\n          className={classes.pageButton} \r\n          onClick={() => nextPage()}\r\n          disabled={!canNextPage}\r\n        >Next</button>\r\n      </div>\r\n      <br/>\r\n      <SmallButton clicked={handleViewDetailsRequest}>View Details</SmallButton>\r\n    </>\r\n  );\r\n}\r\nexport default withRouter(SessionTable);"]},"metadata":{},"sourceType":"module"}