{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\aljou\\\\Documents\\\\Bitbucket\\\\management-portal\\\\src\\\\containers\\\\ManagementPortal.js\";\nimport React, { Component } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { Auth } from 'aws-amplify';\nimport axios from 'axios';\nimport NavBar from '../components/NavBar/NavBar';\nimport Footer from '../components/Footer/Footer';\nimport LoginPage from './LoginPage/LoginPage';\nimport LandingPage from './LandingPage/LandingPage';\nimport OrgsAndTests from './OrgsAndTests/OrgsAndTests';\nimport ManageOrgs from './ManageOrgs/ManageOrgs';\nimport ManageTests from './ManageTests/ManageTests';\nimport ViewUsers from './ViewUsers/ViewUsers';\nimport ViewSession from './ViewSessions/ViewSession/ViewSession';\nimport ViewSessions from './ViewSessions/ViewSessions';\nimport OrgForm from './OrgForm/OrgForm';\nimport TestForm from './TestForms/TestForm/TestForm';\nimport AddTestConfirmation from './ConfirmationPages/AddTestConfirmation/AddTestConfirmation';\nimport EditTestForm from './TestForms/EditTestForm/EditTestForm';\nimport AddOrgConfirmation from './ConfirmationPages/AddOrgConfirmation/AddOrgConfirmation';\nimport EditOrgForm from './EditOrgForm/EditOrgForm';\nimport ResetPassword from './ResetPassword/ResetPassword';\nimport ResetPasswordVerification from './ResetPasswordVerification/ResetPasswordVerification';\nimport ChangePassword from './ChangePassword/ChangePassword';\nimport ChangePasswordConfirmation from './ConfirmationPages/ChangePasswordConfirmation/ChangePasswordConfirmation';\nimport classes from './ManagementPortal.module.css';\nimport Alert from '../components/UI/Alert/Alert';\n\nclass ManagementPortal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isAuthenticated: false,\n      isAuthenticating: true,\n      user: null\n    };\n\n    this.setAuthStatus = authenticated => {\n      this.setState({\n        isAuthenticated: authenticated\n      });\n    };\n\n    this.setUser = user => {\n      this.setState({\n        user: user\n      });\n    };\n  }\n\n  // ensure login state persists through reloads\n  async componentDidMount() {\n    try {\n      const session = await Auth.currentSession();\n      this.setAuthStatus(true); // set axios defaults\n\n      axios.defaults.baseURL = 'https://jiyfwa9bs1.execute-api.us-west-2.amazonaws.com/dev';\n      axios.defaults.headers.common['Authorization'] = `Bearer ${session.accessToken.jwtToken}`;\n      const user = await Auth.currentAuthenticatedUser();\n      this.setUser(user);\n    } catch (error) {\n      console.log(error);\n    }\n\n    this.setState({\n      isAuthenticating: false\n    });\n  }\n\n  render() {\n    // pass global state and helper functions as props\n    const authProps = {\n      isAuthenticated: this.state.isAuthenticated,\n      user: this.state.user,\n      setAuthStatus: this.setAuthStatus,\n      setUser: this.setUser\n    }; // create private route component, which will render component w/ props if user is logged in,\n    // and if not, will redirect to login page\n\n    const PrivateRoute = ({\n      component: Component,\n      ...rest\n    }) => /*#__PURE__*/_jsxDEV(Route, { ...rest,\n      render: props => this.state.isAuthenticated === true ? /*#__PURE__*/_jsxDEV(Component, { ...props,\n        auth: authProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n\n    return !this.state.isAuthenticating && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        auth: authProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(LoginPage, { ...props,\n          auth: authProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 55\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/reset-password\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(ResetPassword, { ...props,\n          auth: authProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 64\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/reset-password-verification\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(ResetPasswordVerification, { ...props,\n          auth: authProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 77\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/change-password\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(ChangePassword, { ...props,\n          auth: authProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 65\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/change-password-confirmation\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(ChangePasswordConfirmation, { ...props,\n          auth: authProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 78\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/\",\n        exact: true,\n        component: LandingPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/manage-orgs-and-tests\",\n        exact: true,\n        component: OrgsAndTests\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/manage-orgs\",\n        exact: true,\n        component: ManageOrgs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/manage-tests\",\n        exact: true,\n        component: ManageTests\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/view-users\",\n        exact: true,\n        component: ViewUsers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/view-sessions\",\n        exact: true,\n        component: ViewSessions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/view-selected-session\",\n        component: ViewSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/add-test\",\n        exact: true,\n        component: TestForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/add-test-confirmation\",\n        exact: true,\n        component: AddTestConfirmation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/edit-test\",\n        component: EditTestForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/add-org\",\n        exact: true,\n        component: OrgForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/add-org-confirmation\",\n        exact: true,\n        component: AddOrgConfirmation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/edit-org\",\n        component: EditOrgForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default ManagementPortal;","map":{"version":3,"sources":["C:/Users/aljou/Documents/Bitbucket/management-portal/src/containers/ManagementPortal.js"],"names":["React","Component","Redirect","Route","Auth","axios","NavBar","Footer","LoginPage","LandingPage","OrgsAndTests","ManageOrgs","ManageTests","ViewUsers","ViewSession","ViewSessions","OrgForm","TestForm","AddTestConfirmation","EditTestForm","AddOrgConfirmation","EditOrgForm","ResetPassword","ResetPasswordVerification","ChangePassword","ChangePasswordConfirmation","classes","Alert","ManagementPortal","state","isAuthenticated","isAuthenticating","user","setAuthStatus","authenticated","setState","setUser","componentDidMount","session","currentSession","defaults","baseURL","headers","common","accessToken","jwtToken","currentAuthenticatedUser","error","console","log","render","authProps","PrivateRoute","component","rest","props"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Redirect, Route} from 'react-router-dom';\r\nimport {Auth} from 'aws-amplify';\r\nimport axios from 'axios';\r\n\r\nimport NavBar from '../components/NavBar/NavBar';\r\nimport Footer from '../components/Footer/Footer';\r\nimport LoginPage from './LoginPage/LoginPage';\r\nimport LandingPage from './LandingPage/LandingPage';\r\nimport OrgsAndTests from './OrgsAndTests/OrgsAndTests';\r\nimport ManageOrgs from './ManageOrgs/ManageOrgs';\r\nimport ManageTests from './ManageTests/ManageTests';\r\nimport ViewUsers from './ViewUsers/ViewUsers';\r\nimport ViewSession from './ViewSessions/ViewSession/ViewSession';\r\nimport ViewSessions from './ViewSessions/ViewSessions';\r\nimport OrgForm from './OrgForm/OrgForm';\r\nimport TestForm from './TestForms/TestForm/TestForm';\r\nimport AddTestConfirmation from './ConfirmationPages/AddTestConfirmation/AddTestConfirmation';\r\nimport EditTestForm from './TestForms/EditTestForm/EditTestForm';\r\nimport AddOrgConfirmation from './ConfirmationPages/AddOrgConfirmation/AddOrgConfirmation';\r\nimport EditOrgForm from './EditOrgForm/EditOrgForm';\r\nimport ResetPassword from './ResetPassword/ResetPassword';\r\nimport ResetPasswordVerification from './ResetPasswordVerification/ResetPasswordVerification';\r\nimport ChangePassword from './ChangePassword/ChangePassword';\r\nimport ChangePasswordConfirmation from './ConfirmationPages/ChangePasswordConfirmation/ChangePasswordConfirmation';\r\nimport classes from './ManagementPortal.module.css'\r\nimport Alert from '../components/UI/Alert/Alert'\r\n\r\nclass ManagementPortal extends Component {\r\n  // set global state to track authentication and user object\r\n  state = {\r\n    isAuthenticated: false,\r\n    isAuthenticating: true,\r\n    user: null\r\n  }\r\n\r\n  setAuthStatus = (authenticated) => {\r\n    this.setState({isAuthenticated: authenticated});\r\n  }\r\n\r\n  setUser = (user) => {\r\n    this.setState({user: user})\r\n  }\r\n  \r\n  // ensure login state persists through reloads\r\n  async componentDidMount() {\r\n    try {\r\n      const session = await Auth.currentSession();\r\n      this.setAuthStatus(true);\r\n\r\n      // set axios defaults\r\n      axios.defaults.baseURL = 'https://jiyfwa9bs1.execute-api.us-west-2.amazonaws.com/dev';\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${session.accessToken.jwtToken}`;\r\n\r\n      const user = await Auth.currentAuthenticatedUser();\r\n      this.setUser(user);\r\n    } catch(error) {\r\n      console.log(error);\r\n    }\r\n    this.setState({isAuthenticating: false});\r\n  }\r\n\r\n  render() {\r\n    // pass global state and helper functions as props\r\n    const authProps = {\r\n      isAuthenticated: this.state.isAuthenticated,\r\n      user: this.state.user,\r\n      setAuthStatus: this.setAuthStatus,\r\n      setUser: this.setUser\r\n    }\r\n\r\n    // create private route component, which will render component w/ props if user is logged in,\r\n    // and if not, will redirect to login page\r\n    const PrivateRoute = ({component: Component, ...rest}) => (\r\n      <Route {...rest} render={(props) => (\r\n        this.state.isAuthenticated === true\r\n          ? <Component {...props} auth={authProps} />\r\n          : <Redirect to='/login' />\r\n      )} />\r\n    )\r\n\r\n    return (\r\n      !this.state.isAuthenticating &&\r\n      <>\r\n        <NavBar auth={authProps} />\r\n\r\n        {/* <div className={classes.dialogoverlay} id =\"dialogoverlay\"></div>\r\n        <div className= {classes.dialogbox} id=\"dialogbox\">\r\n        <div>\r\n            <div className={classes.dialoghead} id=\"dialogboxhead\"></div>\r\n            <div className={classes.dialogbody} id=\"dialogboxbody\"></div>\r\n            <div className={classes.dialogfoot} id=\"dialogboxfoot\">\r\n            <button id=\"yes1\" className={classes.alertbutton} onClick={\r\n              () => {document.getElementById('dialogbox').style.display = \"none\";\r\n              document.getElementById('dialogoverlay').style.display = \"none\";}\r\n            }>OK</button>\r\n            </div>\r\n        </div>\r\n        </div> */}\r\n\r\n        {/* public routes */}\r\n        <Route path='/login' exact render={(props) => <LoginPage {...props} auth={authProps} />} />\r\n        <Route path='/reset-password' exact render={(props) => <ResetPassword {...props} auth={authProps} />} />\r\n        <Route path='/reset-password-verification' exact render={(props) => <ResetPasswordVerification {...props} auth={authProps} />} />\r\n        <Route path='/change-password' exact render={(props) => <ChangePassword {...props} auth={authProps} />} />\r\n        <Route path='/change-password-confirmation' exact render={(props) => <ChangePasswordConfirmation {...props} auth={authProps} />} />\r\n\r\n        {/* private routes */}\r\n        <PrivateRoute path='/' exact component={LandingPage} />\r\n        <PrivateRoute path='/manage-orgs-and-tests' exact component={OrgsAndTests} />\r\n        <PrivateRoute path='/manage-orgs' exact component={ManageOrgs} />\r\n        <PrivateRoute path='/manage-tests' exact component={ManageTests} />\r\n        <PrivateRoute path='/view-users' exact component={ViewUsers} />\r\n        <PrivateRoute path='/view-sessions' exact component={ViewSessions} />\r\n        <PrivateRoute path='/view-selected-session' component={ViewSession} />\r\n        <PrivateRoute path='/add-test' exact component={TestForm} />\r\n        <PrivateRoute path='/add-test-confirmation' exact component={AddTestConfirmation} />\r\n        <PrivateRoute path='/edit-test' component={EditTestForm} />\r\n        <PrivateRoute path='/add-org' exact component={OrgForm} />\r\n        <PrivateRoute path='/add-org-confirmation' exact component={AddOrgConfirmation} />\r\n        <PrivateRoute path='/edit-org' component={EditOrgForm} />\r\n\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ManagementPortal;"]},"metadata":{},"sourceType":"module"}