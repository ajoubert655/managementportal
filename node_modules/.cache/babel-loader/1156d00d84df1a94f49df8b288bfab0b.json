{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aljou\\\\Documents\\\\Bitbucket\\\\management-portal\\\\src\\\\components\\\\DataTables\\\\Sessions\\\\SessionTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from 'react';\nimport { useTable, useSortBy, useFilters, usePagination, useRowSelect } from 'react-table';\nimport Table from 'react-bootstrap/Table';\nimport axios from '../../../axios';\nimport { withRouter, useHistory } from 'react-router-dom';\nimport { COLUMNS } from './columns';\nimport classes from './SessionTable.module.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\nimport Checkbox from '../../UI/Checkbox/Checkbox';\nimport SmallButton from '../../UI/SmallButton/SmallButton';\nimport Spinner from '../../UI/Spinner/Spinner';\n\nconst SessionTable = () => {\n  _s();\n\n  // declare state variables\n  const [sessions, setSessions] = useState([]);\n  const [loaded, setLoaded] = useState(false); // allow use of history\n\n  const history = useHistory(); // get data from api\n\n  useEffect(() => {\n    axios.get('/sessions').then(res => {\n      //console.log(res.data.result.Items);\n      const pathToData = res.data.result.Items;\n      const loadedData = []; // push data objects into an array\n\n      for (const Item in pathToData) {\n        loadedData.push({\n          itemId: pathToData[Item].itemId,\n          itemType: pathToData[Item].itemType,\n          // time data\n          created: new Date(pathToData[Item].created).toLocaleDateString(),\n          updated: new Date(pathToData[Item].updated).toLocaleDateString(),\n          startTime: new Date(pathToData[Item].startTime).toLocaleTimeString(),\n          endTime: new Date(pathToData[Item].endTime).toLocaleTimeString(),\n          // session ids and process state\n          sessionOrgId: pathToData[Item].sessionOrgId,\n          sessionTestId: pathToData[Item].sessionTestId,\n          sessionUserId: pathToData[Item].sessionUserId,\n          processState: pathToData[Item].processState,\n          // examinee data\n          id: pathToData[Item].examinee.id,\n          email: pathToData[Item].examinee.email,\n          firstName: pathToData[Item].examinee.firstName,\n          lastName: pathToData[Item].examinee.lastName,\n          // test data\n          description: pathToData[Item].test.description,\n          testId: pathToData[Item].test.id,\n          // analytics\n          analytics: pathToData[Item].analytics,\n          // geolocation\n          geoLocation: pathToData[Item].geoLocation,\n          // openTok\n          openTok: pathToData[Item].openTok,\n          // userAgent\n          userAgent: pathToData[Item].userAgent,\n          // images\n          images: pathToData[Item].images,\n          // videos\n          videos: pathToData[Item].videos\n        });\n      } //console.log(loadedData);\n\n\n      setSessions(loadedData);\n      setLoaded(true);\n    });\n  }, []); // memoize data to ensure it is not duplicated on each render\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => sessions, [sessions]); // create table instance\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    nextPage,\n    previousPage,\n    canNextPage,\n    canPreviousPage,\n    pageOptions,\n    prepareRow,\n    selectedFlatRows,\n    state\n  } = useTable({\n    columns: columns,\n    data: data\n  }, // add sorting, filtering, pagination and row select\n  useFilters, useSortBy, usePagination, useRowSelect, // add a column for checkbox to tables\n  hooks => {\n    hooks.visibleColumns.push(columns => {\n      return [{\n        id: 'selection',\n        Header: 'select',\n        Cell: ({\n          row\n        }) => /*#__PURE__*/_jsxDEV(Checkbox, { ...row.getToggleRowSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, this)\n      }, ...columns];\n    });\n  }); // destructure global filter and page index from state object\n\n  const {\n    pageIndex\n  } = state; // data from selected row is stored here\n\n  let selectedRow = selectedFlatRows; //console.log(selectedRow);\n\n  const handleViewDetailsRequest = () => {\n    // get sessionId of selected row and store in variable\n    const sessionToDisplay = selectedRow[0].original.itemId; // initialize query parameters array\n\n    const queryParams = []; // encode sessionId and push into queryParams as strings\n\n    queryParams.push(encodeURIComponent('itemId') + '=' + encodeURIComponent(sessionToDisplay)); // join queryParams strings and store in variable\n\n    const queryString = queryParams.join('&'); // pass queryString data to ViewSession container via router\n\n    history.push({\n      pathname: '/view-selected-session',\n      search: '?' + queryString\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.tableWrap,\n    children: loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column =>\n            /*#__PURE__*/\n            // render headers w/ sort functionality\n            _jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n              children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: column.canFilter ? column.render('Filter') : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: column.isSorted ? column.isSortedDesc ? /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faCaretUp\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 69\n                }, this) : /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faCaretDown\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 108\n                }, this) : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: page.map(row => {\n            prepareRow(row);\n            return (\n              /*#__PURE__*/\n              // render table rows\n              _jsxDEV(\"tr\", { ...row.getRowProps(),\n                children: row.cells.map(cell => {\n                  return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                    children: cell.render('Cell')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 30\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 19\n              }, this)\n            );\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.pageButton,\n          onClick: () => previousPage(),\n          disabled: !canPreviousPage,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: classes.pageNum,\n          children: [\"Page\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [pageIndex + 1, \" of \", pageOptions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.pageButton,\n          onClick: () => nextPage(),\n          disabled: !canNextPage,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SmallButton, {\n        clicked: handleViewDetailsRequest,\n        children: \"View Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.spinnerWrap,\n      children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SessionTable, \"B98vteV0QlHjFsm94Nldha1PE+o=\", false, function () {\n  return [useHistory, useTable];\n});\n\n_c = SessionTable;\nexport default _c2 = withRouter(SessionTable);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SessionTable\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/aljou/Documents/Bitbucket/management-portal/src/components/DataTables/Sessions/SessionTable.js"],"names":["React","useMemo","useState","useEffect","useTable","useSortBy","useFilters","usePagination","useRowSelect","Table","axios","withRouter","useHistory","COLUMNS","classes","FontAwesomeIcon","faCaretUp","faCaretDown","Checkbox","SmallButton","Spinner","SessionTable","sessions","setSessions","loaded","setLoaded","history","get","then","res","pathToData","data","result","Items","loadedData","Item","push","itemId","itemType","created","Date","toLocaleDateString","updated","startTime","toLocaleTimeString","endTime","sessionOrgId","sessionTestId","sessionUserId","processState","id","examinee","email","firstName","lastName","description","test","testId","analytics","geoLocation","openTok","userAgent","images","videos","columns","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","prepareRow","selectedFlatRows","state","hooks","visibleColumns","Header","Cell","row","getToggleRowSelectedProps","pageIndex","selectedRow","handleViewDetailsRequest","sessionToDisplay","original","queryParams","encodeURIComponent","queryString","join","pathname","search","tableWrap","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","canFilter","isSorted","isSortedDesc","getRowProps","cells","cell","getCellProps","pageButton","pageNum","length","spinnerWrap"],"mappings":"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","sourcesContent":["import React, {useMemo, useState, useEffect} from 'react';\r\nimport {\r\n  useTable, \r\n  useSortBy, \r\n  useFilters, \r\n  usePagination,\r\n  useRowSelect\r\n} from 'react-table';\r\nimport Table from 'react-bootstrap/Table';\r\nimport axios from '../../../axios';\r\nimport {withRouter, useHistory} from 'react-router-dom';\r\n\r\nimport {COLUMNS} from './columns';\r\n\r\nimport classes from './SessionTable.module.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faCaretUp} from '@fortawesome/free-solid-svg-icons';\r\nimport {faCaretDown} from '@fortawesome/free-solid-svg-icons';\r\nimport Checkbox from '../../UI/Checkbox/Checkbox';\r\nimport SmallButton from '../../UI/SmallButton/SmallButton';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\n\r\nconst SessionTable = () => {\r\n  // declare state variables\r\n  const [sessions, setSessions] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  // allow use of history\r\n  const history = useHistory();\r\n\r\n  // get data from api\r\n  useEffect(() => {\r\n    axios.get('/sessions').then(res => {\r\n      //console.log(res.data.result.Items);\r\n      const pathToData = res.data.result.Items\r\n      const loadedData = [];\r\n\r\n      // push data objects into an array\r\n      for (const Item in pathToData) {\r\n        loadedData.push({\r\n          itemId: pathToData[Item].itemId,\r\n          itemType: pathToData[Item].itemType,\r\n          // time data\r\n          created: new Date(pathToData[Item].created).toLocaleDateString(),\r\n          updated: new Date(pathToData[Item].updated).toLocaleDateString(),\r\n          startTime: new Date(pathToData[Item].startTime).toLocaleTimeString(),\r\n          endTime: new Date(pathToData[Item].endTime).toLocaleTimeString(),\r\n          // session ids and process state\r\n          sessionOrgId: pathToData[Item].sessionOrgId,\r\n          sessionTestId: pathToData[Item].sessionTestId,\r\n          sessionUserId: pathToData[Item].sessionUserId,\r\n          processState: pathToData[Item].processState,\r\n          // examinee data\r\n          id: pathToData[Item].examinee.id,\r\n          email: pathToData[Item].examinee.email,\r\n          firstName: pathToData[Item].examinee.firstName,\r\n          lastName: pathToData[Item].examinee.lastName,\r\n          // test data\r\n          description: pathToData[Item].test.description,\r\n          testId: pathToData[Item].test.id,\r\n          // analytics\r\n          analytics: pathToData[Item].analytics,\r\n          // geolocation\r\n          geoLocation: pathToData[Item].geoLocation,\r\n          // openTok\r\n          openTok: pathToData[Item].openTok,\r\n          // userAgent\r\n          userAgent: pathToData[Item].userAgent,\r\n          // images\r\n          images: pathToData[Item].images,\r\n          // videos\r\n          videos: pathToData[Item].videos\r\n        });\r\n      }\r\n      //console.log(loadedData);\r\n      setSessions(loadedData);\r\n      setLoaded(true);\r\n    });\r\n  }, []);\r\n\r\n  // memoize data to ensure it is not duplicated on each render\r\n  const columns = useMemo(() => COLUMNS, []);\r\n  const data = useMemo(() => sessions, [sessions]);\r\n\r\n  // create table instance\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    canNextPage,\r\n    canPreviousPage,\r\n    pageOptions,\r\n    prepareRow,\r\n    selectedFlatRows,\r\n    state,\r\n  } = useTable(\r\n    {\r\n      columns: columns,\r\n      data: data\r\n    },\r\n    // add sorting, filtering, pagination and row select\r\n    useFilters, useSortBy, usePagination, useRowSelect,\r\n    // add a column for checkbox to tables\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => {\r\n        return [\r\n          {\r\n            id: 'selection',\r\n            Header: 'select',\r\n            Cell: ({row}) => (\r\n              <Checkbox {...row.getToggleRowSelectedProps()} />\r\n            )\r\n          },\r\n          ...columns\r\n        ]\r\n      });\r\n    }\r\n  );\r\n\r\n  // destructure global filter and page index from state object\r\n  const {pageIndex} =  state;\r\n\r\n  // data from selected row is stored here\r\n  let selectedRow = selectedFlatRows\r\n  //console.log(selectedRow);\r\n\r\n  const handleViewDetailsRequest = () => {\r\n    // get sessionId of selected row and store in variable\r\n    const sessionToDisplay = selectedRow[0].original.itemId;\r\n\r\n    // initialize query parameters array\r\n    const queryParams = [];\r\n\r\n    // encode sessionId and push into queryParams as strings\r\n    queryParams.push(encodeURIComponent('itemId') + '=' + encodeURIComponent(sessionToDisplay));\r\n\r\n    // join queryParams strings and store in variable\r\n    const queryString = queryParams.join('&');\r\n    \r\n    // pass queryString data to ViewSession container via router\r\n    history.push({\r\n      pathname: '/view-selected-session',\r\n      search: '?' + queryString\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className={classes.tableWrap}>\r\n      {/* if data is loaded, render table and associated components. if not, render loading spinner */}\r\n      {loaded \r\n        ? \r\n        <div>\r\n          {/* render table */}\r\n          <Table {...getTableProps()} striped bordered hover>\r\n            <thead>\r\n              {headerGroups.map((headerGroup) => (\r\n                  <tr {...headerGroup.getHeaderGroupProps()}>\r\n                    {headerGroup.headers.map((column) => (\r\n                      // render headers w/ sort functionality\r\n                      <th {...column.getHeaderProps(column.getSortByToggleProps())}>  \r\n                        {column.render('Header')}\r\n                        {/* if column is authorized for filtering, render filter */}\r\n                        <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                        <span>\r\n                          {column.isSorted ? (column.isSortedDesc ? <FontAwesomeIcon icon={faCaretUp} /> : <FontAwesomeIcon icon={faCaretDown} />) : ''}\r\n                        </span>\r\n                      </th>\r\n                    ))} \r\n                  </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {page.map(row => {\r\n                prepareRow(row)\r\n                return (\r\n                  // render table rows\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map((cell) => {\r\n                      return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                    })}\r\n                  </tr>\r\n                )\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n          <div>\r\n            {/* render pagination buttons */}\r\n            <button\r\n              className={classes.pageButton} \r\n              onClick={() => previousPage()}\r\n              disabled={!canPreviousPage}\r\n            >Previous</button>\r\n            <span className={classes.pageNum}>\r\n              Page{' '}\r\n              <strong>\r\n                {pageIndex + 1} of {pageOptions.length}\r\n              </strong>\r\n            </span>\r\n            <button\r\n              className={classes.pageButton} \r\n              onClick={() => nextPage()}\r\n              disabled={!canNextPage}\r\n            >Next</button>\r\n          </div>\r\n          <br/>\r\n          <SmallButton clicked={handleViewDetailsRequest}>View Details</SmallButton>\r\n        </div>\r\n        :\r\n        <div className={classes.spinnerWrap}> \r\n          <Spinner/>\r\n        </div>\r\n      }\r\n    \r\n\r\n    </div>\r\n  );\r\n}\r\nexport default withRouter(SessionTable);\r\n"]},"metadata":{},"sourceType":"module"}